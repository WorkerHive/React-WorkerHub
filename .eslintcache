[{"/home/workhub/work/web-ui/src/App.tsx":"1","/home/workhub/work/web-ui/src/views/Login/index.tsx":"2","/home/workhub/work/web-ui/src/components/sidebar/index.tsx":"3","/home/workhub/work/web-ui/src/views/Dashboard/index.tsx":"4","/home/workhub/work/web-ui/src/views/Settings/index.tsx":"5","/home/workhub/work/web-ui/src/reportWebVitals.ts":"6","/home/workhub/work/web-ui/src/views/Workflows/index.tsx":"7","/home/workhub/work/web-ui/src/components/menu-view/index.tsx":"8","/home/workhub/work/web-ui/src/views/Home/index.tsx":"9","/home/workhub/work/web-ui/src/components/layout/index.tsx":"10","/home/workhub/work/web-ui/src/views/Team/index.tsx":"11","/home/workhub/work/web-ui/src/views/Dashboard/type-map.tsx":"12","/home/workhub/work/web-ui/src/index.tsx":"13","/home/workhub/work/web-ui/src/views/Settings/settings-map.tsx":"14"},{"size":575,"mtime":1610330592566,"results":"15","hashOfConfig":"16"},{"size":1006,"mtime":1610329923093,"results":"17","hashOfConfig":"16"},{"size":3350,"mtime":1610410156614,"results":"18","hashOfConfig":"16"},{"size":1136,"mtime":1610348100280,"results":"19","hashOfConfig":"16"},{"size":1011,"mtime":1610355427420,"results":"20","hashOfConfig":"16"},{"size":425,"mtime":1610329038329,"results":"21","hashOfConfig":"16"},{"size":3551,"mtime":1610356927084,"results":"22","hashOfConfig":"16"},{"size":1260,"mtime":1610356500683,"results":"23","hashOfConfig":"16"},{"size":634,"mtime":1610348040528,"results":"24","hashOfConfig":"16"},{"size":2746,"mtime":1610412199125,"results":"25","hashOfConfig":"16"},{"size":683,"mtime":1610411582969,"results":"26","hashOfConfig":"16"},{"size":7739,"mtime":1610412438043,"results":"27","hashOfConfig":"16"},{"size":500,"mtime":1610329038329,"results":"28","hashOfConfig":"16"},{"size":2511,"mtime":1610355948072,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},"43fa3o",{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"33"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"33"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"33"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"33"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"33"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"33"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"/home/workhub/work/web-ui/src/App.tsx",["67"],"import React from 'react';\nimport isElectron from 'is-electron'\nimport { HashRouter, BrowserRouter, Route, Redirect } from 'react-router-dom'\n\nimport {Login} from './views/Login';\n\nimport './App.css';\nimport { Dashboard } from './views/Dashboard';\n\nlet Router : any;\n\nif(isElectron()){\n  Router = HashRouter\n}else{\n  Router = BrowserRouter\n}\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/dashboard\" component={Dashboard} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n",["68","69"],"/home/workhub/work/web-ui/src/views/Login/index.tsx",["70"],"import { Divider, Button, Paper, TextField, Typography } from '@material-ui/core';\nimport React from 'react';\n\nimport './index.css';\n\nexport interface LoginProps{\n    title: string;\n}\n\nexport const Login = (props : LoginProps) => {\n    return (\n        <div className=\"login-view\">\n           <div className=\"image-section\">\n            </div> \n            <Paper className=\"login-section\">\n                <div className=\"login-header\">\n                    <img className=\"login-header__img\" />\n                    <Typography variant=\"h4\">{props.title || 'Workhub'}</Typography>\n                </div>\n                <Divider />\n                <TextField \n                    label=\"Username\" />\n                <TextField \n                    type=\"password\"\n                    label=\"Password\" />\n                <Button \n                    style={{marginTop: 8}}\n                    color=\"primary\"\n                    variant=\"contained\">Login</Button>\n            </Paper>\n        </div>\n    )\n}","/home/workhub/work/web-ui/src/components/sidebar/index.tsx",["71"],"import React from 'react';\n\nimport {\n    Typography,\n    List,\n    ListItem,\n    IconButton,\n    Divider,\n    Paper\n} from '@material-ui/core';\n\nimport {\n  Contacts,\n    AccountTree,\n    Dashboard,\n    CalendarToday,\n    SupervisorAccount,\n    BusinessCenter,\n    Description,\n    EmojiNature,\n    Settings,\n    LocalLibrary,\n    ChevronLeft,\n    ChevronRight\n  } from '@material-ui/icons';\n\nimport { withRouter } from 'react-router-dom'\n\nimport './index.css';\n\nexport interface SidebarProps {\n    history: any;\n    match: any;\n}\n\nexport function Sidebar(props : SidebarProps){\n  const [ minimized, setMinimized ] = React.useState(true);\n    const menu = [\n        {\n          icon: <Dashboard />,\n          label: \"Dashboard\",\n          path: \"\"\n        },\n        {\n          icon: <CalendarToday />,\n          label: \"Calendar\",\n          path: \"/calendar\"\n        },\n        {\n          icon: <AccountTree />,\n          label: \"Projects\",\n          path: \"/projects\"\n        },\n        {\n          icon: <SupervisorAccount />,\n          label: \"Team\",\n          path: \"/team\"\n        },\n        {\n          icon: <BusinessCenter /> ,\n          label: \"Equipment\",\n          path: \"/equipment\"\n        },\n        {\n          icon: <Description />,\n          label: \"Files\",\n          path: \"/files\"\n        },\n        {\n          icon: <LocalLibrary />,\n          label: \"Documentation\",\n          path: '/kb'\n        },\n        {\n          icon: <Contacts />,\n          label: \"Contacts\",\n          path: \"/contacts\"\n        },\n        {\n          icon: <EmojiNature />,\n          label: \"Workflows\",\n          path: '/workflows'\n        }\n      ]\n\n    return (\n      <Paper className=\"sidebar\" style={{width: minimized ? 64 : 200}} >\n        <List style={{flex: 1, maxWidth: minimized ? 64 : 200, transition: 'max-width 200ms ease-in'}}> \n        <ListItem style={{position: 'relative', color: 'teal', padding: 12, fontSize: 20, justifyContent: 'flex-start'}}>\n           <img src={'/assets/teal.png'} alt=\"Workhub\" style={{height: 33, marginRight: minimized ? 0 : 8, marginLeft: minimized ? 0: 0}} /> \n\n           {!minimized && <Typography>Workhub</Typography>}\n\n           <IconButton size=\"small\" style={{backgroundColor: 'green', zIndex: 9, position: 'absolute', right: -12, bottom: -12}} onClick={() => setMinimized(!minimized)}>\n              {minimized ? <ChevronRight style={{color: 'rgb(222,222,222)'}}/> : <ChevronLeft style={{color: 'rgb(222,222,222)'}} />}  \n           </IconButton>\n          \n        </ListItem>\n        <Divider />\n        {menu.map((x, ix) => (\n            <ListItem \n            className={menu.map((x) => x.path).indexOf(window.location.pathname.split(props.match.url)[1]) == ix ? 'selected menu-item': 'menu-item'}\n            onClick={() => props.history.push(`${props.match.url}${x.path}`)}\n            button >\n              {x.icon} \n              {!minimized && x.label}\n            </ListItem>\n        ))}\n        </List>\n        <Divider />\n        <ListItem style={{justifyContent: minimized ? 'center' : \"initial\"}} button onClick={() => props.history.push(`${props.match.url}/settings`)}>\n            <Settings style={{marginRight: minimized ? 0 : 12}} />\n            {!minimized && <Typography>Settings</Typography>}\n        </ListItem>\n        </Paper>\n    )\n}\n\nexport default withRouter(Sidebar)","/home/workhub/work/web-ui/src/views/Dashboard/index.tsx",["72"],"import React, { Suspense, lazy } from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport Sidebar from '../../components/sidebar'\n\nimport './index.css';\n\nconst TypeMap = lazy(() => import('./type-map'))\nconst Home = lazy(() => import('../Home'))\nconst Settings = lazy(() => import('../Settings')) \nconst Workflows = lazy(() => import('../Workflows'))\nconst Team = lazy(() => import('../Team'))\n\nexport interface DashboardProps{\n    match: any;\n}\n\nexport const Dashboard: React.FC<DashboardProps> = (props) => {\n\n    return (\n        <div className=\"dashboard-view\">\n            <Sidebar />\n            <Suspense fallback={<div>Loading...</div>}>\n            <div className=\"dashboard-body\">\n                <Switch>\n                    <Route path={`${props.match.url}/`} exact component={Home} />\n                    <Route path={`${props.match.url}/workflows`} exact component={Workflows} />\n                    <Route path={`${props.match.url}/settings`} exact component={Settings} />\n                    <TypeMap />\n\n                </Switch>\n            </div>\n            </Suspense>\n        </div>        \n\n    )\n}","/home/workhub/work/web-ui/src/views/Settings/index.tsx",["73","74","75","76"],"import React from 'react';\n\nimport { AccordionList } from \"@workerhive/react-ui\"\nimport { SettingsMap } from './settings-map'\nimport './index.css';\n\nexport interface SettingsProps{\n    history: any;\n}\n\nexport default function Settings (props: SettingsProps){\n  const [ converters, setConverters ] = React.useState([])\n  const [ stores, setStores ] = React.useState([])\n\n  React.useEffect(() => {\n   /* getStoreTypes().then((types : any) => {\n      console.log(\"TYOES\", types)\n      setStoreTypes(types);\n    })\n\n    props.getStores();\n */\n\n    /*getConverters().then((converters) => {\n      console.log(converters)\n      setConverters(converters)\n    })*/\n  }, [])\n\n  const roles = [\n    {\n      name: \"Admin\"\n    },\n    {\n      name: \"Editor\"\n    },\n    {\n      name: \"User\"\n    }\n  ]\n\n  const [ storeTypes, setStoreTypes ] = React.useState([]);\n\n    return (\n        <div className=\"settings-view\">\n            <AccordionList items={SettingsMap(props, storeTypes, converters, roles)} />\n        </div>\n    )\n}","/home/workhub/work/web-ui/src/reportWebVitals.ts",[],"/home/workhub/work/web-ui/src/views/Workflows/index.tsx",[],"/home/workhub/work/web-ui/src/components/menu-view/index.tsx",[],["77","78"],"/home/workhub/work/web-ui/src/views/Home/index.tsx",[],"/home/workhub/work/web-ui/src/components/layout/index.tsx",["79","80","81","82","83","84","85"],"import React, {Suspense, lazy, useRef} from 'react';\nimport RGL, {WidthProvider} from 'react-grid-layout'\nimport { WorkhubClient } from '@workerhive/client'\nimport useResizeAware from 'react-resize-aware';\nimport 'react-grid-layout/css/styles.css';\nconst ReactGridLayout = WidthProvider(RGL);\n\n\nconst Header = lazy(() => import('@workerhive/react-ui').then((r) => ({default: r.Header})))\nconst SearchTable = lazy(() => import('@workerhive/react-ui').then((r) => ({default: r.SearchTable})))\n\nconst TestWidget = (props: any) => {\n    return (<div>TeST</div>)\n}\n\nexport interface LayoutItem {\n    x: number;\n    y: number;\n    w: number;\n    h: number;\n    i: string;\n    maxW?:number;\n    maxH?:number;\n    component: any;\n}\n\nexport interface LayoutProps {\n    layout: (sizes: any, rowHeight: number) => Array<LayoutItem>\n    data?: any;\n}\n\nconst defaultProps = {\n    items: 20,\n    rowHeight: 50,\n    cols: 12, \n}\n\nconst client = new WorkhubClient();\n\nexport const Layout : React.FC<LayoutProps> = (props) => {\n      const [resizeListener, sizes] = useResizeAware();\n\n    const [ widgets, setWidgets ] = React.useState<any>({WordCounter: {type: TestWidget, title: 'Test Widget'}})\n    const [ layout, setLayouts ] = React.useState<any>({rows: [{columns: [{className: 'col-md-12', widgets: [{key: 'WordCounter'}]}]}]})\n\n    const [data, setData] = React.useState<any>({})\n    const [ types, setTypes ] = React.useState<any>({})\n\n    React.useEffect(() => {\n        client.getModels().then((types : any) => {\n            let _type : any ={};\n            types.forEach((ty : any) => {\n                _type[ty.name] = ty\n            })\n            setTypes(_type)\n        })\n\n        if(props.data.methods){\n           setTimeout(() => {\n            for(const k in props.data.methods){\n                client.actions[props.data.methods[k]]().then((r : any) => {\n                    let d = Object.assign({}, data);\n                    d[k] = r;\n                    setData(d)\n                })\n            }\n        }, 1000)\n  \n        }\n    }, [props.data, data])\n\n    return (\n        <Suspense fallback={<div>loading</div>}>\n            {resizeListener}\n        <ReactGridLayout \n            style={{flex:1}}\n            {...defaultProps}    \n            layout={props.layout(sizes, 64) as RGL.Layout[]}\n            onLayoutChange={(layout) => {}} \n            isBounded={true}>\n                {props.layout(sizes, 64).map((x) => (\n                    <div key={x.i} style={{display: 'flex', flexDirection: 'column'}}>\n                        {x.component instanceof Function ? x.component(data, types[props.data.type], client) : x.component}\n                    </div>\n                ))}\n        </ReactGridLayout>\n        </Suspense>\n    )\n}","/home/workhub/work/web-ui/src/views/Team/index.tsx",[],"/home/workhub/work/web-ui/src/views/Dashboard/type-map.tsx",["86","87","88","89"],"import React, { FC, ReactElement } from 'react';\nimport { Header, MutableDialog, PermissionForm, SearchTable } from '@workerhive/react-ui'\nimport { Route } from 'react-router-dom';\nimport { Layout } from '../../components/layout';\nimport { Fab } from '@material-ui/core';\nimport { Add } from '@material-ui/icons';\n\nconst Types = [\n    {\n        path: '/dashboard/projects',\n        label: \"Projects\",\n        data: {\n            type: \"Project\",\n            methods: {\n                projects: 'getProjects'\n            }\n        },\n        layout: (sizes : any, rowHeight: number) => [\n            {\n                i: 'header',\n                x: 0,\n                y: 0,\n                w: 12,\n                h: 1,\n                component: (data: any) => (<Header title=\"Projects\" />)\n            },\n            {\n                i: 'data',\n                x: 0,\n                y: 1,\n                w: 12,\n                h: (sizes.height / rowHeight) -2,\n                component: (data: any) => (<SearchTable renderItem={(item: any) => item.name} data={data.projects || []} />)\n            }\n        ]\n    },\n    {\n        path: '/dashboard/team',\n        label: \"Team\",\n        data: {\n            type: 'TeamMember',\n            methods: {\n                team: 'getTeamMembers'\n            }\n        },\n        layout: (sizes : any, rowHeight: number) => [\n            {\n                i: 'header',\n                x: 0,\n                y: 0,\n                w: 12,\n                h: 1,\n                component: (<Header title=\"Team\" />)\n            },\n            {\n                i: 'data',\n                x: 0,\n                y: 0,\n                w: 12,\n                h: (sizes.height / rowHeight) - 2,\n                component: (data: any, type: any) => {\n                    const t: any = {};\n                    if (type) type.def.forEach((_type: any) => {\n                        t[_type.name] = _type.type;\n                    })\n                    return ((props) => {\n                        const [open, modalOpen] = React.useState<boolean>(false);\n\n                        return (\n                            <div style={{ flex: 1, display: 'flex', position: 'relative' }}>\n                                <MutableDialog \n                                    title={\"Team\"} \n                                    structure={t}\n                                    onSave={(item : any) => {\n                                        console.log(\"new team member\", item)\n                                    }}\n                                    onClose={() => modalOpen(false)}\n                                    open={open} />\n                                <SearchTable renderItem={(item:any) => item.name} data={data.team || []} />\n                                <Fab onClick={() => modalOpen(true)} style={{ position: 'absolute', right: 12, bottom: 12 }} color=\"primary\">\n                                    <Add />\n                                </Fab>\n                            </div>\n                        )\n                    })({})\n                }\n            }\n        ]\n    },\n    {\n        path: '/dashboard/contacts',\n        label: \"Contacts\",\n        data: {\n            type: 'Contact',\n            methods: {\n                equipment: 'getContacts'\n            }\n        },\n        layout: (sizes : any, rowHeight : number) => [\n            {\n                i: 'header',\n                x: 0,\n                y: 0,\n                w: 12,\n                h: 1,\n                component: (<Header title=\"Contacts\" />)\n            },\n            {\n                i: 'data',\n                x: 0,\n                y: 0,\n                w: 12,\n                h: (sizes.height / rowHeight) - 2,\n                component: (data: any, type: any, client: any) => {\n                    const t: any = {};\n                    console.log(type)\n                    if (type) type.def.forEach((_type: any) => {\n                        t[_type.name] = _type.type;\n                    })\n                    return ((props) => {\n                        const [open, modalOpen] = React.useState<boolean>(false);\n\n                        return (\n                            <div style={{ flex: 1, display: 'flex', position: 'relative' }}>\n                                <MutableDialog \n                                    title={\"Contacts\"} \n                                    structure={t} \n                                    onSave={(item:any, type: any) => {\n                                        props.client.actions.addEquipment(item)\n                                        modalOpen(false)\n                                    }}\n                                    onClose={() => modalOpen(false)}\n                                     open={open} />\n                                <SearchTable renderItem={(item: any) => item.name} data={data.contacts || []} />\n                                <Fab onClick={() => modalOpen(true)} style={{ position: 'absolute', right: 12, bottom: 12 }} color=\"primary\">\n                                    <Add />\n                                </Fab>\n                            </div>\n                        )\n                    })({client})\n                }\n            }\n        ]\n    },\n    {\n        path: '/dashboard/equipment',\n        label: \"Equipment\",\n        data: {\n            type: 'Equipment',\n            methods: {\n                equipment: 'getEquipments'\n            }\n        },\n        layout: (sizes : any, rowHeight : number) => [\n            {\n                i: 'header',\n                x: 0,\n                y: 0,\n                w: 12,\n                h: 1,\n                component: (<Header title=\"Equipment\" />)\n            },\n            {\n                i: 'data',\n                x: 0,\n                y: 0,\n                w: 12,\n                h: (sizes.height / rowHeight) - 2,\n                component: (data: any, type: any, client: any) => {\n                    const t: any = {};\n                    console.log(type)\n                    if (type) type.def.forEach((_type: any) => {\n                        t[_type.name] = _type.type;\n                    })\n                    return ((props) => {\n                        const [open, modalOpen] = React.useState<boolean>(false);\n\n                        return (\n                            <div style={{ flex: 1, display: 'flex', position: 'relative' }}>\n                                <MutableDialog \n                                    title={\"Equipment\"} \n                                    structure={t} \n                                    onSave={(item:any, type: any) => {\n                                        props.client.actions.addEquipment(item)\n                                        modalOpen(false)\n                                    }}\n                                    onClose={() => modalOpen(false)}\n                                     open={open} />\n                                <SearchTable renderItem={(item: any) => item.name} data={data.equipment || []} />\n                                <Fab onClick={() => modalOpen(true)} style={{ position: 'absolute', right: 12, bottom: 12 }} color=\"primary\">\n                                    <Add />\n                                </Fab>\n                            </div>\n                        )\n                    })({client})\n                }\n            }\n        ]\n    }\n]\n\nexport default (props: any) => {\n    return (\n        <>\n            {Types.map((x) => (\n                <Route path={x.path} exact render={(props) => (\n                    <Layout data={x.data} layout={x.layout} />\n                )} />\n            ))}\n        </>\n    )\n}","/home/workhub/work/web-ui/src/index.tsx",[],"/home/workhub/work/web-ui/src/views/Settings/settings-map.tsx",[],{"ruleId":"90","severity":1,"message":"91","line":3,"column":44,"nodeType":"92","messageId":"93","endLine":3,"endColumn":52},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":17,"column":21,"nodeType":"100","endLine":17,"endColumn":58},{"ruleId":"101","severity":1,"message":"102","line":102,"column":108,"nodeType":"103","messageId":"104","endLine":102,"endColumn":110},{"ruleId":"90","severity":1,"message":"105","line":12,"column":7,"nodeType":"92","messageId":"93","endLine":12,"endColumn":11},{"ruleId":"90","severity":1,"message":"106","line":12,"column":23,"nodeType":"92","messageId":"93","endLine":12,"endColumn":36},{"ruleId":"90","severity":1,"message":"107","line":13,"column":11,"nodeType":"92","messageId":"93","endLine":13,"endColumn":17},{"ruleId":"90","severity":1,"message":"108","line":13,"column":19,"nodeType":"92","messageId":"93","endLine":13,"endColumn":28},{"ruleId":"90","severity":1,"message":"109","line":42,"column":23,"nodeType":"92","messageId":"93","endLine":42,"endColumn":36},{"ruleId":"94","replacedBy":"110"},{"ruleId":"96","replacedBy":"111"},{"ruleId":"90","severity":1,"message":"112","line":1,"column":32,"nodeType":"92","messageId":"93","endLine":1,"endColumn":38},{"ruleId":"90","severity":1,"message":"113","line":9,"column":7,"nodeType":"92","messageId":"93","endLine":9,"endColumn":13},{"ruleId":"90","severity":1,"message":"114","line":10,"column":7,"nodeType":"92","messageId":"93","endLine":10,"endColumn":18},{"ruleId":"90","severity":1,"message":"115","line":43,"column":13,"nodeType":"92","messageId":"93","endLine":43,"endColumn":20},{"ruleId":"90","severity":1,"message":"116","line":43,"column":22,"nodeType":"92","messageId":"93","endLine":43,"endColumn":32},{"ruleId":"90","severity":1,"message":"117","line":44,"column":13,"nodeType":"92","messageId":"93","endLine":44,"endColumn":19},{"ruleId":"90","severity":1,"message":"118","line":44,"column":21,"nodeType":"92","messageId":"93","endLine":44,"endColumn":31},{"ruleId":"90","severity":1,"message":"119","line":1,"column":17,"nodeType":"92","messageId":"93","endLine":1,"endColumn":19},{"ruleId":"90","severity":1,"message":"120","line":1,"column":21,"nodeType":"92","messageId":"93","endLine":1,"endColumn":33},{"ruleId":"90","severity":1,"message":"121","line":2,"column":33,"nodeType":"92","messageId":"93","endLine":2,"endColumn":47},{"ruleId":"122","severity":1,"message":"123","line":202,"column":1,"nodeType":"124","endLine":212,"endColumn":2},"@typescript-eslint/no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","no-native-reassign",["125"],"no-negated-in-lhs",["126"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Team' is assigned a value but never used.","'setConverters' is assigned a value but never used.","'stores' is assigned a value but never used.","'setStores' is assigned a value but never used.","'setStoreTypes' is assigned a value but never used.",["125"],["126"],"'useRef' is defined but never used.","'Header' is assigned a value but never used.","'SearchTable' is assigned a value but never used.","'widgets' is assigned a value but never used.","'setWidgets' is assigned a value but never used.","'layout' is assigned a value but never used.","'setLayouts' is assigned a value but never used.","'FC' is defined but never used.","'ReactElement' is defined but never used.","'PermissionForm' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]