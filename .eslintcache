[{"/Users/owner/theinvisiblerainbow/worker-hive/react-workerhub/src/index.tsx":"1","/Users/owner/theinvisiblerainbow/worker-hive/react-workerhub/src/reportWebVitals.ts":"2","/Users/owner/theinvisiblerainbow/worker-hive/react-workerhub/src/App.tsx":"3","/Users/owner/theinvisiblerainbow/worker-hive/react-workerhub/src/views/Dashboard/index.tsx":"4","/Users/owner/theinvisiblerainbow/worker-hive/react-workerhub/src/views/Login/index.tsx":"5","/Users/owner/theinvisiblerainbow/worker-hive/react-workerhub/src/views/Dashboard/type-map.tsx":"6","/Users/owner/theinvisiblerainbow/worker-hive/react-workerhub/src/views/PageEditor/index.tsx":"7","/Users/owner/theinvisiblerainbow/worker-hive/react-workerhub/src/views/Admin/index.tsx":"8","/Users/owner/theinvisiblerainbow/worker-hive/react-workerhub/src/views/Home/index.tsx":"9","/Users/owner/theinvisiblerainbow/worker-hive/react-workerhub/src/views/Settings/index.tsx":"10","/Users/owner/theinvisiblerainbow/worker-hive/react-workerhub/src/views/Workflows/index.tsx":"11","/Users/owner/theinvisiblerainbow/worker-hive/react-workerhub/src/views/Team/index.tsx":"12","/Users/owner/theinvisiblerainbow/worker-hive/react-workerhub/src/views/TypeEditor/index.tsx":"13","/Users/owner/theinvisiblerainbow/worker-hive/react-workerhub/src/components/sidebar/index.tsx":"14","/Users/owner/theinvisiblerainbow/worker-hive/react-workerhub/src/components/layout/index.tsx":"15","/Users/owner/theinvisiblerainbow/worker-hive/react-workerhub/src/components/menu-view/index.tsx":"16","/Users/owner/theinvisiblerainbow/worker-hive/react-workerhub/src/views/Settings/settings-map.tsx":"17","/Users/owner/theinvisiblerainbow/worker-hive/react-workerhub/src/components/layout-editor/index.tsx":"18","/Users/owner/theinvisiblerainbow/worker-hive/react-workerhub/src/components/layout-editor/data-modal.tsx":"19","/Users/owner/theinvisiblerainbow/worker-hive/react-workerhub/src/components/layout-editor/editor-modal.tsx":"20"},{"size":500,"mtime":1611129960147,"results":"21","hashOfConfig":"22"},{"size":425,"mtime":1611129960148,"results":"23","hashOfConfig":"22"},{"size":919,"mtime":1611129960141,"results":"24","hashOfConfig":"22"},{"size":1917,"mtime":1611129960153,"results":"25","hashOfConfig":"22"},{"size":1006,"mtime":1611129960155,"results":"26","hashOfConfig":"22"},{"size":10789,"mtime":1611129960153,"results":"27","hashOfConfig":"22"},{"size":1811,"mtime":1611129960156,"results":"28","hashOfConfig":"22"},{"size":449,"mtime":1611129960152,"results":"29","hashOfConfig":"22"},{"size":634,"mtime":1611129960154,"results":"30","hashOfConfig":"22"},{"size":1011,"mtime":1611129960157,"results":"31","hashOfConfig":"22"},{"size":3553,"mtime":1611129960158,"results":"32","hashOfConfig":"22"},{"size":683,"mtime":1611129960157,"results":"33","hashOfConfig":"22"},{"size":2503,"mtime":1611129960158,"results":"34","hashOfConfig":"22"},{"size":3350,"mtime":1611129960146,"results":"35","hashOfConfig":"22"},{"size":2939,"mtime":1611129960145,"results":"36","hashOfConfig":"22"},{"size":1293,"mtime":1611129960146,"results":"37","hashOfConfig":"22"},{"size":2628,"mtime":1611129960157,"results":"38","hashOfConfig":"22"},{"size":3822,"mtime":1611129960144,"results":"39","hashOfConfig":"22"},{"size":2735,"mtime":1611129960142,"results":"40","hashOfConfig":"22"},{"size":2315,"mtime":1611129960142,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1ppvp8e",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"44"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"44"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"44"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},"/Users/owner/theinvisiblerainbow/worker-hive/react-workerhub/src/index.tsx",[],["97","98"],"/Users/owner/theinvisiblerainbow/worker-hive/react-workerhub/src/reportWebVitals.ts",[],"/Users/owner/theinvisiblerainbow/worker-hive/react-workerhub/src/App.tsx",["99","100","101"],"import React from 'react';\nimport isElectron from 'is-electron'\nimport { HashRouter, BrowserRouter, Route, Redirect } from 'react-router-dom'\nimport { WorkhubClient, WorkhubProvider } from '@workerhive/client'\nimport {Login} from './views/Login';\n\nimport './App.css';\nimport { Dashboard } from './views/Dashboard';\n\nlet Router : any;\n\nif(isElectron()){\n  Router = HashRouter\n}else{\n  Router = BrowserRouter\n}\n\nfunction App() {\n\n  const [ hubUrl, setHubUrl ] = React.useState<string | null>(isElectron() ? localStorage.getItem('workhub-api') : (process.env.NODE_ENV ? 'http://localhost:4002' : ''));\n\n  return (\n    <WorkhubProvider args={{a: 'b'}} url={hubUrl || ''}>\n        <Router>\n          <div className=\"App\">\n            <Route path=\"/login\" component={Login} />\n            <Route path=\"/dashboard\" component={Dashboard} />\n          </div>\n        </Router>\n    </WorkhubProvider>\n  );\n}\n\nexport default App;\n","/Users/owner/theinvisiblerainbow/worker-hive/react-workerhub/src/views/Dashboard/index.tsx",["102","103"],"import { useHub } from '@workerhive/client';\nimport React, { Suspense, lazy } from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport Sidebar from '../../components/sidebar'\nimport { AdminView } from '../Admin';\nimport { PageEditor } from '../PageEditor';\nimport { TypeEditor } from '../TypeEditor';\n\nimport './index.css';\n\nconst TypeMap = lazy(() => import('./type-map'))\nconst Home = lazy(() => import('../Home'))\nconst Settings = lazy(() => import('../Settings')) \nconst Workflows = lazy(() => import('../Workflows'))\nconst Team = lazy(() => import('../Team'))\n\nexport interface DashboardProps{\n    match: any;\n}\n\nconst Fallback = (props : any) => {\n    return (<div>Loading ...</div>)\n}\n\nexport const Dashboard: React.FC<DashboardProps> = (props) => {\n    const [ hub, isReady, err ] = useHub()\n    console.log(hub && Object.keys(hub!.actions).length)\n    return (\n        <div className=\"dashboard-view\">\n            <Sidebar />\n            {hub != null && isReady ?(\n                <Suspense fallback={<Fallback />}>\n                <div className=\"dashboard-body\">\n                    <Switch>\n                        <Route path={`${props.match.url}/`} exact component={Home} />\n                        <Route path={`${props.match.url}/workflows`} exact component={Workflows} />\n                        <Route path={`${props.match.url}/settings`} exact component={Settings} />\n                        <Route path={`${props.match.url}/settings/type-editor/:type`} exact component={TypeEditor} />\n                        <Route path={`${props.match.url}/settings/type-editor/:type/pages/:page_id`} component={PageEditor} />\n                        <Route path={`${props.match.url}/admin`} component={AdminView} />\n                        <TypeMap />\n\n                    </Switch>\n                </div>\n                </Suspense>\n            ) : <Fallback />}\n\n        </div>        \n\n    )\n}","/Users/owner/theinvisiblerainbow/worker-hive/react-workerhub/src/views/Login/index.tsx",["104"],"import { Divider, Button, Paper, TextField, Typography } from '@material-ui/core';\nimport React from 'react';\n\nimport './index.css';\n\nexport interface LoginProps{\n    title: string;\n}\n\nexport const Login = (props : LoginProps) => {\n    return (\n        <div className=\"login-view\">\n           <div className=\"image-section\">\n            </div> \n            <Paper className=\"login-section\">\n                <div className=\"login-header\">\n                    <img className=\"login-header__img\" />\n                    <Typography variant=\"h4\">{props.title || 'Workhub'}</Typography>\n                </div>\n                <Divider />\n                <TextField \n                    label=\"Username\" />\n                <TextField \n                    type=\"password\"\n                    label=\"Password\" />\n                <Button \n                    style={{marginTop: 8}}\n                    color=\"primary\"\n                    variant=\"contained\">Login</Button>\n            </Paper>\n        </div>\n    )\n}","/Users/owner/theinvisiblerainbow/worker-hive/react-workerhub/src/views/Dashboard/type-map.tsx",["105","106","107","108","109"],"import React, { FC, ReactElement } from 'react';\nimport { DocumentEditor, FileBrowser, Header, MutableDialog, PermissionForm, SearchTable } from '@workerhive/react-ui'\nimport { Route } from 'react-router-dom';\nimport { Layout } from '../../components/layout';\nimport { Fab } from '@material-ui/core';\nimport { Add } from '@material-ui/icons';\n\nconst Types = [\n    {\n        path: '/dashboard/projects',\n        label: \"Projects\",\n        data: {\n            type: \"Project\",\n            methods: {\n                projects: 'getProjects'\n            }\n        },\n        layout: (sizes : any, rowHeight: number) => [\n            {\n                i: 'header',\n                x: 0,\n                y: 0,\n                w: 12,\n                h: 1,\n                component: (data: any) => (<Header title=\"Projects\" />)\n            },\n            {\n                i: 'data',\n                x: 0,\n                y: 1,\n                w: 12,\n                h: (sizes.height / rowHeight) - (sizes.width < 600 ? 2 : 1),\n                component: (data: any) => (<SearchTable renderItem={(item: any) => item.name} data={data.projects || []} />)\n            }\n        ]\n    },\n    {\n        path: '/dashboard/team',\n        label: \"Team\",\n        data: {\n            type: 'TeamMember',\n            methods: {\n                team: 'getTeamMembers'\n            }\n        },\n        layout: (sizes : any, rowHeight: number) => [\n            {\n                i: 'header',\n                x: 0,\n                y: 0,\n                w: 12,\n                h: 1,\n                component: (<Header title=\"Team\" />)\n            },\n            {\n                i: 'data',\n                x: 0,\n                y: 0,\n                w: 12,\n                h: (sizes.height / rowHeight) - (sizes.width < 600 ? 2 : 1),\n                component: (data: any, type: any, client: any) => {\n                    const t: any = {};\n                    if (type) type.def.forEach((_type: any) => {\n                        t[_type.name] = _type.type;\n                    })\n                    return ((props) => {\n                        const [open, modalOpen] = React.useState<boolean>(false);\n\n                        return (\n                            <div style={{ flex: 1, display: 'flex', position: 'relative' }}>\n                                <MutableDialog \n                                    title={\"Team\"} \n                                    structure={t}\n                                    onSave={(item : any) => {\n                                        console.log(\"new team member\", item)\n\n                                        props.client.actions.addTeamMember(item)\n                                    }}\n                                    onClose={() => modalOpen(false)}\n                                    open={open} />\n                                <SearchTable renderItem={(item:any) => item.name} data={data.team || []} />\n                                <Fab onClick={() => modalOpen(true)} style={{ position: 'absolute', right: 12, bottom: 12 }} color=\"primary\">\n                                    <Add />\n                                </Fab>\n                            </div>\n                        )\n                    })({client})\n                }\n            }\n        ]\n    },\n    {\n        path: '/dashboard/files',\n        label: \"Files\",\n        data: {\n            type: 'File',\n            methods: {\n                files: 'getFiles'\n            }\n        },\n        layout: (sizes: any, rowHeight: number) => [\n            {\n                i: 'header',\n                x: 0,\n                y: 0,\n                w: 12, \n                h: 1,\n                component: (<Header title=\"Files\" />)\n            },\n            {\n                i: 'data',\n                x: 0,\n                y: 1,\n                w: 12,\n                h: (sizes.height / rowHeight) -2,\n                component: (data: any) => (<FileBrowser files={data.files} />)\n            }\n        ]\n    },\n    {\n        path: '/dashboard/kb',\n        label: \"Knowledge\",\n        data :{\n            type: 'Knowledge',\n            methods: {\n                knowledges: 'getKnowledges'\n            }\n        },\n        layout: (sizes: any, rowHeight: number) => [\n            {\n                i: 'header',\n                x: 0,\n                y: 0,\n                w: 12,\n                h: 1,\n                component: (<Header title=\"Knowledge Base\" />)\n            },\n            {\n                i: 'editor',\n                x: 0,\n                y: 1,\n                w: 12,\n                h: (sizes.height / rowHeight) - 2,\n                component: (data: any, type: any, client: any) => {\n                    const t: any = {};\n                    if (type) type.def.forEach((_type: any) => {\n                        t[_type.name] = _type.type;\n                    })\n                    return ((props) => {\n                        const [open, modalOpen] = React.useState<boolean>(false);\n\n                        return (\n                            <div style={{ flex: 1, display: 'flex', position: 'relative' }}>\n                                <MutableDialog \n                                    title={\"Knowledge\"} \n                                    structure={t} \n                                    onSave={({item}) => {\n                                        props.client.actions.addKnowledge(item)\n                                        modalOpen(false)\n                                    }}\n                                    onClose={() => modalOpen(false)}\n                                     open={open} />\n                                <SearchTable renderItem={(item: any) => item.title} data={data.knowledges || []} />\n                                <Fab onClick={() => modalOpen(true)} style={{ position: 'absolute', right: 12, bottom: 12 }} color=\"primary\">\n                                    <Add />\n                                </Fab>\n                            </div>\n                        )\n                    })({client})\n                }\n            }\n            \n        ]\n    },\n    {\n        path: '/dashboard/contacts',\n        label: \"Contacts\",\n        data: {\n            type: 'Contact',\n            methods: {\n                contacts: 'getContacts'\n            }\n        },\n        layout: (sizes : any, rowHeight : number) => [\n            {\n                i: 'header',\n                x: 0,\n                y: 0,\n                w: 12,\n                h: 1,\n                component: (<Header title=\"Contacts\" />)\n            },\n            {\n                i: 'data',\n                x: 0,\n                y: 1,\n                w: 12,\n                h: (sizes.height / rowHeight) - (sizes.width < 600 ? 2 : 1),\n                component: (data: any, type: any, client: any) => {\n                    const t: any = {};\n                    console.log(type)\n                    if (type) type.def.forEach((_type: any) => {\n                        t[_type.name] = _type.type;\n                    })\n                    return ((props) => {\n                        const [open, modalOpen] = React.useState<boolean>(false);\n\n                        return (\n                            <div style={{ flex: 1, display: 'flex', position: 'relative' }}>\n                                <MutableDialog \n                                    title={\"Contacts\"} \n                                    structure={t} \n                                    onSave={({item}) => {\n                                        props.client.actions.addContact(item)\n                                        modalOpen(false)\n                                    }}\n                                    onClose={() => modalOpen(false)}\n                                     open={open} />\n                                <SearchTable renderItem={(item: any) => item.name} data={data.contacts || []} />\n                                <Fab onClick={() => modalOpen(true)} style={{ position: 'absolute', right: 12, bottom: 12 }} color=\"primary\">\n                                    <Add />\n                                </Fab>\n                            </div>\n                        )\n                    })({client})\n                }\n            }\n        ]\n    },\n    {\n        path: '/dashboard/equipment',\n        label: \"Equipment\",\n        data: {\n            type: 'Equipment',\n            methods: {\n                equipment: 'getEquipments'\n            }\n        },\n        layout: (sizes : any, rowHeight : number) => [\n            {\n                i: 'header',\n                x: 0,\n                y: 0,\n                w: 12,\n                h: 1,\n                component: (<Header title=\"Equipment\" />)\n            },\n            {\n                i: 'data',\n                x: 0,\n                y: 0,\n                w: 12,\n                h: (sizes.height / rowHeight) - (sizes.width < 600 ? 2 : 1),\n                component: (data: any, type: any, client: any) => {\n                    const t: any = {};\n                    console.log(type)\n                    if (type) type.def.forEach((_type: any) => {\n                        t[_type.name] = _type.type;\n                    })\n                    return ((props) => {\n                        const [open, modalOpen] = React.useState<boolean>(false);\n\n                        return (\n                            <div style={{ flex: 1, display: 'flex', position: 'relative' }}>\n                                <MutableDialog \n                                    title={\"Equipment\"} \n                                    structure={t} \n                                    onSave={({item}) => {\n                                        props.client.actions.addEquipment(item)\n                                        modalOpen(false)\n                                    }}\n                                    onClose={() => modalOpen(false)}\n                                     open={open} />\n                                <SearchTable renderItem={(item: any) => item.name} data={data.equipment || []} />\n                                <Fab onClick={() => modalOpen(true)} style={{ position: 'absolute', right: 12, bottom: 12 }} color=\"primary\">\n                                    <Add />\n                                </Fab>\n                            </div>\n                        )\n                    })({client})\n                }\n            }\n        ]\n    }\n]\n\nexport default (props: any) => {\n    return (\n        <>\n            {Types.map((x) => (\n                <Route path={x.path} exact render={(props) => (\n                    <Layout data={x.data} layout={x.layout} />\n                )} />\n            ))}\n        </>\n    )\n}","/Users/owner/theinvisiblerainbow/worker-hive/react-workerhub/src/views/PageEditor/index.tsx",["110","111","112","113","114"],"import { useHub } from '@workerhive/client';\nimport React from 'react';\nimport { LayoutEditor } from '../../components/layout-editor';\nimport * as Components from '@workerhive/react-ui'\nimport { identity, isNil, omitBy, pickBy } from 'lodash';\nimport './index.css';\nconst WorkUI : any = {...Components}\n\nexport interface PageEditorProps {\n    match: any;\n}\n\nexport const PageEditor : React.FC<PageEditorProps> = (props) => {\n\n    const pageName = `${props.match.params.type}-${props.match.params.page_id}`\n\n    const [ hub, isReady, err ] = useHub();\n    \n    const [ loaded, setLoaded ] = React.useState<boolean>(false);\n    const [ layout, setLayout ] = React.useState<any>([])\n\n    React.useEffect(() => {\n        hub!.actions.getPageLayout(pageName).then((result : any) => {\n            console.log(result)\n            if(result.items && result.items.length > 0){\n                let items = result.items;\n                setLayout(items.map((x : any) => {\n                   let Component = WorkUI[x.component]\n                   return omitBy({ \n                      ...x,\n                      component: <Component />,\n                      componentName: x.component\n                   }, isNil)\n                }))\n              //  setLayout(result.items)\n            }\n            setLoaded(true)\n        })\n    }, [])\n\n    return (\n        <LayoutEditor layout={layout} onLayoutChange={(layout: any) => {\n            setLayout(layout)\n            console.log(\"Sending update\", layout)\n            if(loaded){\n                hub!.actions.updatePageLayout(pageName, {items: layout.map((x : any) => {\n                let ret = { ...x, component: x.componentName }\n                delete ret.componentName\n                return ret;\n                }), data: {}}) \n            }\n        }}/>\n    )\n}","/Users/owner/theinvisiblerainbow/worker-hive/react-workerhub/src/views/Admin/index.tsx",[],"/Users/owner/theinvisiblerainbow/worker-hive/react-workerhub/src/views/Home/index.tsx",[],"/Users/owner/theinvisiblerainbow/worker-hive/react-workerhub/src/views/Settings/index.tsx",["115","116","117","118"],"import React from 'react';\n\nimport { AccordionList } from \"@workerhive/react-ui\"\nimport { SettingsMap } from './settings-map'\nimport './index.css';\n\nexport interface SettingsProps{\n    history: any;\n}\n\nexport default function Settings (props: SettingsProps){\n  const [ converters, setConverters ] = React.useState([])\n  const [ stores, setStores ] = React.useState([])\n\n  React.useEffect(() => {\n   /* getStoreTypes().then((types : any) => {\n      console.log(\"TYOES\", types)\n      setStoreTypes(types);\n    })\n\n    props.getStores();\n */\n\n    /*getConverters().then((converters) => {\n      console.log(converters)\n      setConverters(converters)\n    })*/\n  }, [])\n\n  const roles = [\n    {\n      name: \"Admin\"\n    },\n    {\n      name: \"Editor\"\n    },\n    {\n      name: \"User\"\n    }\n  ]\n\n  const [ storeTypes, setStoreTypes ] = React.useState([]);\n\n    return (\n        <div className=\"settings-view\">\n            <AccordionList items={SettingsMap(props, storeTypes, converters, roles)} />\n        </div>\n    )\n}","/Users/owner/theinvisiblerainbow/worker-hive/react-workerhub/src/views/Workflows/index.tsx",["119"],"import React from 'react';\n\nimport { Editor, HiveProvider, NodePanel } from \"@workerhive/hive-flow\"\nimport { Header } from '@workerhive/react-ui'\nimport '@workerhive/hive-flow/dist/index.css'\nimport './index.css';\nimport { MenuView } from '../../components/menu-view';\n\nimport { useHub } from '@workerhive/client'\n\nexport interface WorkflowsProps{\n\n}\n\nexport default function Workflows(props: React.FC<WorkflowsProps>){\n\n    const [ client, err ] = useHub()\n\n    const [ nodes, setNodes ] = React.useState<Array<any>>([])\n    const [ links, setLinks ] = React.useState<Array<any>>([])\n    const [ workflow, setWorkflow ] = React.useState<any>({})\n    const [ workflows, setWorkflows ] = React.useState<Array<any>>([]);\n\n    React.useEffect(() => {\n        console.log(client!.actions)\n        client!.actions.getWorkflows().then((workflows : any) => {\n            setWorkflows(workflows)\n        })\n   \n    }, [client])\n\n    const _onNodeAdd = (node: any) => {\n        updateNodes(nodes.concat([node]))\n    }  \n\n    const _onLinkAdd = (link: any) => {\n        updateLinks(links.concat([link]))\n    }\n\n    const updateLinks = (links : any) => {\n        setLinks(links)\n        if(workflow.id) client!.actions.updateWorkflow(workflow.id, {links: links})\n    }\n\n    const updateNodes = (nodes : any) => {\n        setNodes(nodes)\n        console.log(workflow)\n        if(workflow.id) client!.actions.updateWorkflow(workflow.id, {nodes: nodes})\n    }\n\n    return (\n        <div className=\"workflows-view\">\n            <Header tabs={[]} title=\"Workflows\" />\n            <MenuView \n                title={\"Workflows\"}\n                structure={{name: 'String'}}\n                onClick={(item : any) => {\n                    client!.actions.getWorkflow(item.id).then((workflow : any) => {\n                        console.log(workflow)\n                        setWorkflow(workflow)\n                        setNodes(workflow.nodes || [])\n                        setLinks(workflow.links || [])\n                    })\n                }}\n                onSave={(item: any) => {\n                    client!.actions.addWorkflow(item).then((r : any) => {\n                        alert(\"Saved\")\n                    })\n                    console.log(item)\n                }}\n                items={workflows}>\n            <HiveProvider \n            store={{\n                direction: 'horizontal',\n                nodes: nodes,\n                links: links,\n                onNodeAdd: _onNodeAdd,\n                onLinkAdd: _onLinkAdd,\n                onNodeUpdate: (id: any, node: any) => {\n                    let n = nodes.slice()\n                    let ix = n.map((x: any) => x.id).indexOf(id);\n                    n[ix] = {\n                        ...n[ix],\n                        ...node\n                    }\n                    updateNodes(n)\n                },\n                onNodeRemove: (node: any) => {\n                    let n = nodes.slice().filter((a: any) => node.map((x: any) => x.id).indexOf(a.id) < 0);\n                    updateNodes(n)\n                    console.log(node)\n                },\n                onLinkRemove: (link: any) => {\n                    let l = links.slice().filter((a: any) => link.map((x: any) => x.id).indexOf(a.id) < 0);\n                    updateLinks(l);\n                },\n                statusColors: {\n                    'undefined': 'gray'\n                }\n            }}>\n                <Editor />\n                <NodePanel />\n            </HiveProvider>\n            </MenuView>\n        </div>\n    )\n}","/Users/owner/theinvisiblerainbow/worker-hive/react-workerhub/src/views/Team/index.tsx",[],"/Users/owner/theinvisiblerainbow/worker-hive/react-workerhub/src/views/TypeEditor/index.tsx",["120","121","122","123"],"import { IconButton, List, ListItem, Paper, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { CRUDKV, Header } from \"@workerhive/react-ui\"\nimport './index.css';\nimport { Add, ArrowBack } from '@material-ui/icons';\nimport { useHub } from '@workerhive/client';\n\nexport interface TypeEditorProps{\n    match: any;\n    history: any;\n}\n\nexport const TypeEditor : React.FC<TypeEditorProps> = (props) => {\n    const [ type, setType ] = React.useState<any>({def: [{name: 'ID', type: 'ID'}]})\n\n    const [ client, isReady, err ] = useHub();\n\n    const editPage = (page : string) => {\n        props.history.push(`${props.match.url}/pages/${page}`)\n    }\n\n    React.useEffect(() => {\n        if(isReady && client){\n            setType({def: client.models!.filter((a) => a.name === props.match.params.type)[0].def})\n        }\n    }, [])\n\n    return (\n        <div className=\"type-editor\">\n            <Header title={props.match.params.type}/>\n            <div className=\"type-editor__body\">\n                <div className=\"type-editor__details\">\n                    {/*<div style={{display: 'flex', alignItems: 'center'}}>\n                        <IconButton onClick={() => props.history.push(`/dashboard/settings`)}><ArrowBack /></IconButton><Typography variant=\"h6\">{props.match.params.type} </Typography>\n                    </div>*/}\n                    \n                    <Paper className=\"type-editor__types\">\n                        <CRUDKV types={client!.models || []} value={type.def} onChange={(def : any) => {console.log(\"Hit\"); setType({def: def});}} />\n                    </Paper>\n\n                    <Paper className=\"type-editor__views\">\n                        <Typography variant=\"subtitle1\">Views</Typography>\n                        <List>\n                            <ListItem button onClick={() => editPage('default')}>{props.match.params.type} Home</ListItem>\n                            <ListItem button style={{display: 'flex', justifyContent: 'center'}}><Add /> Create new page</ListItem>\n                        </List>\n                    </Paper>\n                </div>\n                <Paper className=\"type-editor__integrations\">\n                    <Typography variant=\"subtitle1\">Integrations</Typography>\n                    <List>\n                        <ListItem button style={{display: 'flex', justifyContent: 'center'}}><Add /> Add Integration</ListItem>\n                    </List>\n                </Paper>\n            </div>\n        </div>\n    )\n}","/Users/owner/theinvisiblerainbow/worker-hive/react-workerhub/src/components/sidebar/index.tsx",["124"],"import React from 'react';\n\nimport {\n    Typography,\n    List,\n    ListItem,\n    IconButton,\n    Divider,\n    Paper\n} from '@material-ui/core';\n\nimport {\n  Contacts,\n    AccountTree,\n    Dashboard,\n    CalendarToday,\n    SupervisorAccount,\n    BusinessCenter,\n    Description,\n    EmojiNature,\n    Settings,\n    LocalLibrary,\n    ChevronLeft,\n    ChevronRight\n  } from '@material-ui/icons';\n\nimport { withRouter } from 'react-router-dom'\n\nimport './index.css';\n\nexport interface SidebarProps {\n    history: any;\n    match: any;\n}\n\nexport function Sidebar(props : SidebarProps){\n  const [ minimized, setMinimized ] = React.useState(true);\n    const menu = [\n        {\n          icon: <Dashboard />,\n          label: \"Dashboard\",\n          path: \"\"\n        },\n        {\n          icon: <CalendarToday />,\n          label: \"Calendar\",\n          path: \"/calendar\"\n        },\n        {\n          icon: <AccountTree />,\n          label: \"Projects\",\n          path: \"/projects\"\n        },\n        {\n          icon: <SupervisorAccount />,\n          label: \"Team\",\n          path: \"/team\"\n        },\n        {\n          icon: <BusinessCenter /> ,\n          label: \"Equipment\",\n          path: \"/equipment\"\n        },\n        {\n          icon: <Description />,\n          label: \"Files\",\n          path: \"/files\"\n        },\n        {\n          icon: <LocalLibrary />,\n          label: \"Documentation\",\n          path: '/kb'\n        },\n        {\n          icon: <Contacts />,\n          label: \"Contacts\",\n          path: \"/contacts\"\n        },\n        {\n          icon: <EmojiNature />,\n          label: \"Workflows\",\n          path: '/workflows'\n        }\n      ]\n\n    return (\n      <Paper className=\"sidebar\" style={{width: minimized ? 64 : 200}} >\n        <List style={{flex: 1, maxWidth: minimized ? 64 : 200, transition: 'max-width 200ms ease-in'}}> \n        <ListItem style={{position: 'relative', color: 'teal', padding: 12, fontSize: 20, justifyContent: 'flex-start'}}>\n           <img src={'/assets/teal.png'} alt=\"Workhub\" style={{height: 33, marginRight: minimized ? 0 : 8, marginLeft: minimized ? 0: 0}} /> \n\n           {!minimized && <Typography>Workhub</Typography>}\n\n           <IconButton size=\"small\" style={{backgroundColor: 'green', zIndex: 9, position: 'absolute', right: -12, bottom: -12}} onClick={() => setMinimized(!minimized)}>\n              {minimized ? <ChevronRight style={{color: 'rgb(222,222,222)'}}/> : <ChevronLeft style={{color: 'rgb(222,222,222)'}} />}  \n           </IconButton>\n          \n        </ListItem>\n        <Divider />\n        {menu.map((x, ix) => (\n            <ListItem \n            className={menu.map((x) => x.path).indexOf(window.location.pathname.split(props.match.url)[1]) == ix ? 'selected menu-item': 'menu-item'}\n            onClick={() => props.history.push(`${props.match.url}${x.path}`)}\n            button >\n              {x.icon} \n              {!minimized && x.label}\n            </ListItem>\n        ))}\n        </List>\n        <Divider />\n        <ListItem style={{justifyContent: minimized ? 'center' : \"initial\"}} button onClick={() => props.history.push(`${props.match.url}/settings`)}>\n            <Settings style={{marginRight: minimized ? 0 : 12}} />\n            {!minimized && <Typography>Settings</Typography>}\n        </ListItem>\n        </Paper>\n    )\n}\n\nexport default withRouter(Sidebar)","/Users/owner/theinvisiblerainbow/worker-hive/react-workerhub/src/components/layout/index.tsx",["125","126","127","128","129","130","131","132","133","134"],"import React, {Suspense, lazy, useRef} from 'react';\nimport RGL, {WidthProvider} from 'react-grid-layout'\nimport { useHub } from '@workerhive/client'\nimport useResizeAware from 'react-resize-aware';\nimport 'react-grid-layout/css/styles.css';\nconst ReactGridLayout = WidthProvider(RGL);\n\nconst Header = lazy(() => import('@workerhive/react-ui').then((r) => ({default: r.Header})))\nconst SearchTable = lazy(() => import('@workerhive/react-ui').then((r) => ({default: r.SearchTable})))\n\nconst TestWidget = (props: any) => {\n    return (<div>TeST</div>)\n}\n\nexport interface LayoutItem {\n    x: number;\n    y: number;\n    w: number;\n    h: number;\n    i: string;\n    maxW?:number;\n    maxH?:number;\n    component: any;\n}\n\nexport interface LayoutProps {\n    layout: (sizes: any, rowHeight: number) => Array<LayoutItem>\n    data?: any;\n}\n\nconst defaultProps = {\n    items: 20,\n    rowHeight: 50,\n    cols: 12, \n}\n\nexport const Layout : React.FC<LayoutProps> = (props) => {\n      const [resizeListener, sizes] = useResizeAware();\n\n      const [ client, isReady, err ] = useHub();\n\n    const [ widgets, setWidgets ] = React.useState<any>({WordCounter: {type: TestWidget, title: 'Test Widget'}})\n    const [ layout, setLayouts ] = React.useState<any>({rows: [{columns: [{className: 'col-md-12', widgets: [{key: 'WordCounter'}]}]}]})\n\n    const [data, setData] = React.useState<any>({})\n    const [ types, setTypes ] = React.useState<any>({})\n\n    React.useEffect(() => {\n        if(Object.keys(data).length < 1 && client != null){\n            client!.getModels().then((types : any) => {\n                let _type : any ={};\n                types.forEach((ty : any) => {\n                    _type[ty.name] = ty\n                })\n                setTypes(_type)\n            })\n\n            if(props.data.methods){\n            setTimeout(() => {\n                for(const k in props.data.methods){\n                    console.log(props.data.methods[k])\n                    client!.actions[props.data.methods[k]]().then((r : any) => {\n                        let d = Object.assign({}, data);\n                        d[k] = r;\n                        setData(d)\n                    })\n                }\n            }, 1000)\n  \n        }\n    }\n    }, [props.data, data])\n\n    return (\n        <Suspense fallback={<div>loading</div>}>\n            {resizeListener}\n        <ReactGridLayout \n            style={{flex:1}}\n            {...defaultProps}    \n            layout={props.layout(sizes, 64) as RGL.Layout[]}\n            onLayoutChange={(layout) => {}} \n            isBounded={true}>\n                {props.layout(sizes, 64).map((x) => (\n                    <div key={x.i} style={{display: 'flex', flexDirection: 'column'}}>\n                        {x.component instanceof Function ? x.component(data, types[props.data.type], client) : x.component}\n                    </div>\n                ))}\n        </ReactGridLayout>\n        </Suspense>\n    )\n}","/Users/owner/theinvisiblerainbow/worker-hive/react-workerhub/src/components/menu-view/index.tsx",[],"/Users/owner/theinvisiblerainbow/worker-hive/react-workerhub/src/views/Settings/settings-map.tsx",["135","136"],"import { Button, Typography } from '@material-ui/core';\nimport { CRUDList } from '@workerhive/react-ui';\nimport { useHub } from '@workerhive/client'\nimport React from 'react';\n\n\nexport const SettingsMap = (props: any, storeTypes : any, converters : any, roles: any) => {\n  const [ client, err ] = useHub()\n\n  const [ models, setModels ] = React.useState<any>([]);\n  React.useEffect(() => {\n    client!.getModels().then(models => {\n      setModels(models)\n    });\n  }, [])\n\n  return [\n    {\n      title: <Typography variant=\"h6\" style={{display: 'flex'}}>Add-ons</Typography>,\n      body: <CRUDList title={\"Add-ons\"} data={converters} />\n    },\n    {\n      title: <Typography variant=\"h6\" style={{display: 'flex'}}>Connections</Typography>,\n      body: (\n        <CRUDList \n          title={\"Connections\"} \n          onDelete={(obj : any) => {\n            if(obj && obj.id){\n              props.deleteStore(obj.id)\n            }\n            \n          }}\n          onSave={(ob : any) => {\n            let obj = Object.assign({}, ob)\n            if(!obj.id){\n              props.addStore(obj)\n            }else{\n              const id = obj.id;\n              delete obj.id;\n              console.log(\"UPDATE STORE\", id, obj)\n\n              props.updateStore(id, obj)\n            }\n          }}\n          type={{name: 'String', type: {type: 'Select', items: storeTypes, key: 'id'}, host: 'String', user: 'String', pass: 'Password', dbName: 'String'}} \n          data={props.stores} />\n      )\n    },\n    {\n      title: <Typography variant=\"h6\" style={{display: 'flex'}}>Roles</Typography>,\n      body: <CRUDList title={\"Roles\"} type={{name: 'String', permissions: {type: 'Table', items: models}}} data={roles} />\n    },\n    {\n      title: <Typography variant=\"h6\" style={{display: 'flex'}}>Data Flow</Typography>,\n      body: (\n        <div style={{flex: 1, display: 'flex', flexDirection: 'column'}}>\n          <Typography color=\"secondary\">Warning: changing these settings is dangerous don't enter unless you know what you're doing</Typography>\n          <Button variant=\"contained\" color=\"primary\" onClick={() => props.history.push(`/dashboard/admin`)}>Go to editor</Button>\n        </div>\n      )\n    },\n    {\n      title: <Typography variant=\"h6\" style={{display: 'flex'}}>Data types</Typography>,\n      body: (\n        <CRUDList title={\"Types\"} type={{name: 'String', def: 'KV'}} data={models} \n          onEdit={(item: any) => {\n            props.history.push(`${props.match.url}/type-editor/${item.name}`)\n          }}\n          onSave={(obj : any) => { \n            console.log(obj) \n          }} />   \n      )\n    }\n  ]\n}","/Users/owner/theinvisiblerainbow/worker-hive/react-workerhub/src/components/layout-editor/index.tsx",["137"],"import { Fab, Menu, MenuItem, Typography } from '@material-ui/core';\nimport { Add, Cancel, Edit } from '@material-ui/icons';\nimport React from 'react';\nimport { v4 } from 'uuid';\nimport { isEqual } from 'lodash'\nimport RGL, {WidthProvider} from 'react-grid-layout'\nimport { EditorModal } from './editor-modal';\nimport { DataModal } from './data-modal'\nimport 'react-grid-layout/css/styles.css';\nimport './index.css';\n\nconst ReactGridLayout = WidthProvider(RGL);\n\nexport interface LayoutEditorProps {\n    onLayoutChange?: Function;\n    layout?: any;\n}\n\nconst defaultProps = {\n    items: 20,\n    rowHeight: 50,\n    cols: 12, \n}\nexport const LayoutEditor : React.FC<LayoutEditorProps> = ({layout = [], onLayoutChange}) => {\n    const [ context, setContext ] = React.useState<any>({})\n    const [ modalOpen, openModal ] = React.useState<boolean>(false);\n    const [ linkModal, openLink ] = React.useState<boolean>(false);\n\n    const componentMenu = [<Edit />, <Cancel />]\n    const setLayouts = (layout: any) => {\n        if(onLayoutChange) onLayoutChange(layout)\n    }\n\n    const addItem = (Item: any, name: string) => {\n        setLayouts(layout.concat([{\n            i: v4(),\n            x: 1,\n            y: 1,\n            w: 1,\n            h: 1,\n            component: <Item />,\n            componentName: name\n        }]))\n    }\n\n\n    const handleContextMenu = (event: React.MouseEvent, item: any) => {\n        event.preventDefault();\n\n        setContext({x: event.clientX - 2, y: event.clientY - 4, item: item})\n        console.log(\"Right click menu\", item)\n    }\n\n    return (\n        <div className=\"workhub-layout-editor\">\n        <ReactGridLayout \n            style={{flex:1}}\n            {...defaultProps}    \n            layout={layout}\n            onLayoutChange={(_layout : any) => {\n                console.log(\"Layout change\")\n                let l = layout.map((x: any) => {\n                    return {\n                        ...x,\n                        ..._layout.filter((a : any) => a.i == x.i)[0]\n                    }\n                })\n                if(!isEqual(l, layout)){\n                    setLayouts(l)\n                }else{\n                    console.log(\"No change\")\n                }\n            }} \n            isBounded={true}>\n                {layout.map((x: any) => (\n                    <div onContextMenu={(e: React.MouseEvent) => {handleContextMenu(e, x)}} key={x.i} className=\"layout-item\" style={{display: 'flex', flexDirection: 'column'}}>\n                        <div className=\"component-menu\">\n                            {componentMenu}\n                        </div>\n                        {x.component}\n                    </div>\n                ))} \n        </ReactGridLayout>\n        <Menu\n            keepMounted\n            open={context.y != null}\n            onClose={() => setContext({})}\n            anchorReference=\"anchorPosition\"\n            anchorPosition={\n                context.y !== null && context.x !== null ? {\n                    top: context.y, left: context.x\n                } : undefined\n            }\n            >\n                <Typography style={{fontWeight: 'bold', paddingLeft: 8}}>{context.item && context.item.componentName}</Typography>\n                <MenuItem onClick={() => openLink(true)}>Link Data</MenuItem>\n                <MenuItem style={{color: 'red'}}>Remove Component</MenuItem>\n            </Menu>\n        <Fab style={{position: 'absolute', right: 12, bottom: 12}} color=\"primary\" onClick={() => openModal(true)}>\n            <Add />\n        </Fab>\n        <DataModal component={context.item} open={linkModal} onClose={(e: any) => {openLink(false)}}/>\n        <EditorModal open={modalOpen} onSave={(item, name) => {\n            addItem(item, name)    \n        }} onClose={() => openModal(false)}/>\n        </div>\n    )\n}","/Users/owner/theinvisiblerainbow/worker-hive/react-workerhub/src/components/layout-editor/data-modal.tsx",["138","139"],"import { Button, Dialog, DialogActions, DialogContent, DialogTitle, FormControl, InputLabel, MenuItem, Select, TextField } from '@material-ui/core';\nimport { useHub } from '@workerhive/client';\nimport React from 'react';\n\nconst WorkUIProps = require('@workerhive/react-ui/dist/prop-spec.js')\n\nexport interface DataModalProps {\n    open: boolean;\n    onClose?(event?: any): any;\n    component?: {componentName: string}\n}\n\nexport interface DataModalInputProps {\n    type: {type: string, properties: any};\n    label?: string;\n}\n\nexport const DataModalInput : React.FC<DataModalInputProps> = (props) => {\n    const [ client, isReady, err ] = useHub()\n\n    switch(props.type.type){\n        case 'string':\n            return <TextField fullWidth label={props.label} />\n        case 'array':\n            return (\n                <FormControl fullWidth>\n                    <InputLabel>{props.label}</InputLabel>\n                    <Select fullWidth>\n                        {client && client.models!.map((x : any) => (\n                            <MenuItem>{x.name}</MenuItem>\n                        ))}\n                    </Select>\n                </FormControl>\n            )\n        case 'object':\n            if(props.type.properties.args != null){\n               return <div>Function ({Object.keys(props.type.properties.args.properties).join(', ')})</div>\n            }\n           return null;\n\n        default: \n            return null;\n    }\n}\n\nexport const DataModal : React.FC<DataModalProps> = (props) => {\n    const [ properties, setProperties ] = React.useState<any>({})\n\n    React.useEffect(() => {\n        if(props.component){\n            let prop = WorkUIProps[`${props.component?.componentName}Props`]\n            console.log(prop)\n            setProperties(prop.properties)\n        } \n    }, [props.component])\n\n\n    return (\n        <Dialog fullWidth open={props.open} onClose={props.onClose}>\n            <DialogTitle>Link Data</DialogTitle>\n            <DialogContent>\n                {Object.keys(properties).map((prop: any) => {\n                    return (\n                     <div style={{display: 'flex', justifyContent: 'space-between', alignItems: 'center'}}>\n                         <div style={{flex: 1}}>{prop} :</div> \n                         <div style={{flex: 1}}>\n                             <DataModalInput label={prop} type={properties[prop]} />\n                          </div>\n                     </div>\n                    );\n                })}\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.onClose}>Cancel</Button>\n                <Button color=\"primary\" variant=\"contained\">Save</Button>\n            </DialogActions>\n        </Dialog>\n    )\n}","/Users/owner/theinvisiblerainbow/worker-hive/react-workerhub/src/components/layout-editor/editor-modal.tsx",["140"],"import * as Components from '@workerhive/react-ui'\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, FormControl, InputLabel, MenuItem, Select, TextField } from '@material-ui/core';\nimport * as React from 'react';\n\nconst WorkUIProps = require('@workerhive/react-ui/dist/prop-spec.js')\n\nconst WorkUI : any = {...Components}\n\n\n\nexport interface EditorModalProps{\n    open: boolean;\n    onClose?: (e: any) => void;\n    onSave?: (e: any, componentName: string) => void;\n}\n\nexport const EditorModal : React.FC<EditorModalProps> = (props) => {\n    const [ component, setComponent ] = React.useState<any>(null);\n    const [ componentProps, setComponentProps ] = React.useState<any>({});\n\n    const onClose = (e: any) => {\n        if(props.onClose) props.onClose(e);\n        setComponent(null)\n    }\n\n    const onSave = (e: any) => {\n        if(props.onSave) props.onSave(WorkUI[component], component)\n        onClose(e);\n    }\n\n    return (\n        <Dialog fullWidth open={props.open} onClose={props.onClose}>\n            <DialogTitle>Add component</DialogTitle>\n            <DialogContent style={{display: 'flex', flexDirection: 'column'}}>\n                <FormControl>\n                    <InputLabel>Component</InputLabel>\n                    <Select value={component} onChange={(e) => {\n                        setComponentProps(WorkUIProps[`${e.target.value}Props`].properties)\n                        \n                        setComponent(e.target.value)\n                    }}>\n                        {Object.keys(WorkUI).map((x : string) => (\n                            <MenuItem value={x}>{x}</MenuItem>\n                        ))}\n                    </Select>\n                </FormControl>\n\n                <div>\n                    {Object.keys(componentProps).map((x) => {\n\n                        return (\n                            <div>\n                               {x}: {componentProps[x].type}\n                            </div>\n                        )\n                    })}\n                </div>\n                \n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onClose} >Cancel</Button>\n                <Button onClick={onSave} color=\"primary\" variant=\"contained\">Add</Button>\n            </DialogActions>\n        </Dialog>\n    )\n}",{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","severity":1,"message":"146","line":3,"column":44,"nodeType":"147","messageId":"148","endLine":3,"endColumn":52},{"ruleId":"145","severity":1,"message":"149","line":4,"column":10,"nodeType":"147","messageId":"148","endLine":4,"endColumn":23},{"ruleId":"145","severity":1,"message":"150","line":20,"column":19,"nodeType":"147","messageId":"148","endLine":20,"endColumn":28},{"ruleId":"145","severity":1,"message":"151","line":16,"column":7,"nodeType":"147","messageId":"148","endLine":16,"endColumn":11},{"ruleId":"145","severity":1,"message":"152","line":27,"column":27,"nodeType":"147","messageId":"148","endLine":27,"endColumn":30},{"ruleId":"153","severity":1,"message":"154","line":17,"column":21,"nodeType":"155","endLine":17,"endColumn":58},{"ruleId":"145","severity":1,"message":"156","line":1,"column":17,"nodeType":"147","messageId":"148","endLine":1,"endColumn":19},{"ruleId":"145","severity":1,"message":"157","line":1,"column":21,"nodeType":"147","messageId":"148","endLine":1,"endColumn":33},{"ruleId":"145","severity":1,"message":"158","line":2,"column":10,"nodeType":"147","messageId":"148","endLine":2,"endColumn":24},{"ruleId":"145","severity":1,"message":"159","line":2,"column":62,"nodeType":"147","messageId":"148","endLine":2,"endColumn":76},{"ruleId":"160","severity":1,"message":"161","line":287,"column":1,"nodeType":"162","endLine":297,"endColumn":2},{"ruleId":"145","severity":1,"message":"163","line":5,"column":10,"nodeType":"147","messageId":"148","endLine":5,"endColumn":18},{"ruleId":"145","severity":1,"message":"164","line":5,"column":35,"nodeType":"147","messageId":"148","endLine":5,"endColumn":41},{"ruleId":"145","severity":1,"message":"165","line":17,"column":18,"nodeType":"147","messageId":"148","endLine":17,"endColumn":25},{"ruleId":"145","severity":1,"message":"152","line":17,"column":27,"nodeType":"147","messageId":"148","endLine":17,"endColumn":30},{"ruleId":"166","severity":1,"message":"167","line":39,"column":8,"nodeType":"168","endLine":39,"endColumn":10,"suggestions":"169"},{"ruleId":"145","severity":1,"message":"170","line":12,"column":23,"nodeType":"147","messageId":"148","endLine":12,"endColumn":36},{"ruleId":"145","severity":1,"message":"171","line":13,"column":11,"nodeType":"147","messageId":"148","endLine":13,"endColumn":17},{"ruleId":"145","severity":1,"message":"172","line":13,"column":19,"nodeType":"147","messageId":"148","endLine":13,"endColumn":28},{"ruleId":"145","severity":1,"message":"173","line":42,"column":23,"nodeType":"147","messageId":"148","endLine":42,"endColumn":36},{"ruleId":"145","severity":1,"message":"152","line":17,"column":21,"nodeType":"147","messageId":"148","endLine":17,"endColumn":24},{"ruleId":"145","severity":1,"message":"174","line":1,"column":10,"nodeType":"147","messageId":"148","endLine":1,"endColumn":20},{"ruleId":"145","severity":1,"message":"175","line":5,"column":15,"nodeType":"147","messageId":"148","endLine":5,"endColumn":24},{"ruleId":"145","severity":1,"message":"152","line":16,"column":30,"nodeType":"147","messageId":"148","endLine":16,"endColumn":33},{"ruleId":"166","severity":1,"message":"176","line":26,"column":8,"nodeType":"168","endLine":26,"endColumn":10,"suggestions":"177"},{"ruleId":"178","severity":1,"message":"179","line":102,"column":108,"nodeType":"180","messageId":"181","endLine":102,"endColumn":110},{"ruleId":"145","severity":1,"message":"182","line":1,"column":32,"nodeType":"147","messageId":"148","endLine":1,"endColumn":38},{"ruleId":"145","severity":1,"message":"183","line":8,"column":7,"nodeType":"147","messageId":"148","endLine":8,"endColumn":13},{"ruleId":"145","severity":1,"message":"184","line":9,"column":7,"nodeType":"147","messageId":"148","endLine":9,"endColumn":18},{"ruleId":"145","severity":1,"message":"165","line":40,"column":23,"nodeType":"147","messageId":"148","endLine":40,"endColumn":30},{"ruleId":"145","severity":1,"message":"152","line":40,"column":32,"nodeType":"147","messageId":"148","endLine":40,"endColumn":35},{"ruleId":"145","severity":1,"message":"185","line":42,"column":13,"nodeType":"147","messageId":"148","endLine":42,"endColumn":20},{"ruleId":"145","severity":1,"message":"186","line":42,"column":22,"nodeType":"147","messageId":"148","endLine":42,"endColumn":32},{"ruleId":"145","severity":1,"message":"187","line":43,"column":13,"nodeType":"147","messageId":"148","endLine":43,"endColumn":19},{"ruleId":"145","severity":1,"message":"188","line":43,"column":21,"nodeType":"147","messageId":"148","endLine":43,"endColumn":31},{"ruleId":"166","severity":1,"message":"189","line":72,"column":8,"nodeType":"168","endLine":72,"endColumn":26,"suggestions":"190"},{"ruleId":"145","severity":1,"message":"152","line":8,"column":19,"nodeType":"147","messageId":"148","endLine":8,"endColumn":22},{"ruleId":"166","severity":1,"message":"189","line":15,"column":6,"nodeType":"168","endLine":15,"endColumn":8,"suggestions":"191"},{"ruleId":"178","severity":1,"message":"179","line":65,"column":60,"nodeType":"180","messageId":"181","endLine":65,"endColumn":62},{"ruleId":"145","severity":1,"message":"165","line":19,"column":21,"nodeType":"147","messageId":"148","endLine":19,"endColumn":28},{"ruleId":"145","severity":1,"message":"152","line":19,"column":30,"nodeType":"147","messageId":"148","endLine":19,"endColumn":33},{"ruleId":"145","severity":1,"message":"192","line":2,"column":112,"nodeType":"147","messageId":"148","endLine":2,"endColumn":121},"no-native-reassign",["193"],"no-negated-in-lhs",["194"],"@typescript-eslint/no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'WorkhubClient' is defined but never used.","'setHubUrl' is assigned a value but never used.","'Team' is assigned a value but never used.","'err' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'FC' is defined but never used.","'ReactElement' is defined but never used.","'DocumentEditor' is defined but never used.","'PermissionForm' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'identity' is defined but never used.","'pickBy' is defined but never used.","'isReady' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'hub' and 'pageName'. Either include them or remove the dependency array.","ArrayExpression",["195"],"'setConverters' is assigned a value but never used.","'stores' is assigned a value but never used.","'setStores' is assigned a value but never used.","'setStoreTypes' is assigned a value but never used.","'IconButton' is defined but never used.","'ArrowBack' is defined but never used.","React Hook React.useEffect has missing dependencies: 'client', 'isReady', and 'props.match.params.type'. Either include them or remove the dependency array. If 'setType' needs the current value of 'props.match.params.type', you can also switch to useReducer instead of useState and read 'props.match.params.type' in the reducer.",["196"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useRef' is defined but never used.","'Header' is assigned a value but never used.","'SearchTable' is assigned a value but never used.","'widgets' is assigned a value but never used.","'setWidgets' is assigned a value but never used.","'layout' is assigned a value but never used.","'setLayouts' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'client'. Either include it or remove the dependency array.",["197"],["198"],"'TextField' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},"Update the dependencies array to be: [hub, pageName]",{"range":"207","text":"208"},"Update the dependencies array to be: [client, isReady, props.match.params.type]",{"range":"209","text":"210"},"Update the dependencies array to be: [props.data, data, client]",{"range":"211","text":"212"},"Update the dependencies array to be: [client]",{"range":"213","text":"214"},[1328,1330],"[hub, pageName]",[845,847],"[client, isReady, props.match.params.type]",[2236,2254],"[props.data, data, client]",[468,470],"[client]"]