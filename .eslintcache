[{"/home/workhub/work/web-ui/src/App.tsx":"1","/home/workhub/work/web-ui/src/views/Login/index.tsx":"2","/home/workhub/work/web-ui/src/components/sidebar/index.tsx":"3","/home/workhub/work/web-ui/src/views/Dashboard/index.tsx":"4","/home/workhub/work/web-ui/src/views/Settings/index.tsx":"5","/home/workhub/work/web-ui/src/reportWebVitals.ts":"6","/home/workhub/work/web-ui/src/views/Workflows/index.tsx":"7","/home/workhub/work/web-ui/src/components/menu-view/index.tsx":"8","/home/workhub/work/web-ui/src/views/Home/index.tsx":"9","/home/workhub/work/web-ui/src/components/layout/index.tsx":"10","/home/workhub/work/web-ui/src/views/Team/index.tsx":"11","/home/workhub/work/web-ui/src/views/Dashboard/type-map.tsx":"12","/home/workhub/work/web-ui/src/index.tsx":"13","/home/workhub/work/web-ui/src/views/Settings/settings-map.tsx":"14","/home/workhub/work/web-ui/src/components/layout-editor/index.tsx":"15","/home/workhub/work/web-ui/src/components/layout-editor/editor-modal.tsx":"16"},{"size":880,"mtime":1610427906283,"results":"17","hashOfConfig":"18"},{"size":1006,"mtime":1610329923093,"results":"19","hashOfConfig":"18"},{"size":3350,"mtime":1610410156614,"results":"20","hashOfConfig":"18"},{"size":1587,"mtime":1610430826988,"results":"21","hashOfConfig":"18"},{"size":1011,"mtime":1610355427420,"results":"22","hashOfConfig":"18"},{"size":425,"mtime":1610329038329,"results":"23","hashOfConfig":"18"},{"size":3517,"mtime":1610427785487,"results":"24","hashOfConfig":"18"},{"size":1260,"mtime":1610356500683,"results":"25","hashOfConfig":"18"},{"size":634,"mtime":1610348040528,"results":"26","hashOfConfig":"18"},{"size":2744,"mtime":1610429042079,"results":"27","hashOfConfig":"18"},{"size":683,"mtime":1610411582969,"results":"28","hashOfConfig":"18"},{"size":10828,"mtime":1610429559877,"results":"29","hashOfConfig":"18"},{"size":500,"mtime":1610329038329,"results":"30","hashOfConfig":"18"},{"size":2507,"mtime":1610427796471,"results":"31","hashOfConfig":"18"},{"size":1931,"mtime":1610433028218,"results":"32","hashOfConfig":"18"},{"size":2838,"mtime":1610436258186,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},"1pdw7py",{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"37"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"37"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"37"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"37"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"37"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"37"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"37"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"37"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/workhub/work/web-ui/src/App.tsx",["77","78"],"import React from 'react';\nimport isElectron from 'is-electron'\nimport { HashRouter, BrowserRouter, Route, Redirect } from 'react-router-dom'\nimport { WorkhubProvider } from '@workerhive/client'\nimport {Login} from './views/Login';\n\nimport './App.css';\nimport { Dashboard } from './views/Dashboard';\n\nlet Router : any;\n\nif(isElectron()){\n  Router = HashRouter\n}else{\n  Router = BrowserRouter\n}\n\nfunction App() {\n\n  const [ hubUrl, setHubUrl ] = React.useState<string | null>(isElectron() ? localStorage.getItem('workhub-api') : (process.env.NODE_ENV ? 'http://localhost:4002' : ''));\n\n  return (\n    <WorkhubProvider args={{a: 'b'}} url={hubUrl || ''}>\n    <Router>\n      <div className=\"App\">\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/dashboard\" component={Dashboard} />\n      </div>\n    </Router>\n    </WorkhubProvider>\n  );\n}\n\nexport default App;\n",["79","80"],"/home/workhub/work/web-ui/src/views/Login/index.tsx",["81"],"import { Divider, Button, Paper, TextField, Typography } from '@material-ui/core';\nimport React from 'react';\n\nimport './index.css';\n\nexport interface LoginProps{\n    title: string;\n}\n\nexport const Login = (props : LoginProps) => {\n    return (\n        <div className=\"login-view\">\n           <div className=\"image-section\">\n            </div> \n            <Paper className=\"login-section\">\n                <div className=\"login-header\">\n                    <img className=\"login-header__img\" />\n                    <Typography variant=\"h4\">{props.title || 'Workhub'}</Typography>\n                </div>\n                <Divider />\n                <TextField \n                    label=\"Username\" />\n                <TextField \n                    type=\"password\"\n                    label=\"Password\" />\n                <Button \n                    style={{marginTop: 8}}\n                    color=\"primary\"\n                    variant=\"contained\">Login</Button>\n            </Paper>\n        </div>\n    )\n}","/home/workhub/work/web-ui/src/components/sidebar/index.tsx",["82"],"import React from 'react';\n\nimport {\n    Typography,\n    List,\n    ListItem,\n    IconButton,\n    Divider,\n    Paper\n} from '@material-ui/core';\n\nimport {\n  Contacts,\n    AccountTree,\n    Dashboard,\n    CalendarToday,\n    SupervisorAccount,\n    BusinessCenter,\n    Description,\n    EmojiNature,\n    Settings,\n    LocalLibrary,\n    ChevronLeft,\n    ChevronRight\n  } from '@material-ui/icons';\n\nimport { withRouter } from 'react-router-dom'\n\nimport './index.css';\n\nexport interface SidebarProps {\n    history: any;\n    match: any;\n}\n\nexport function Sidebar(props : SidebarProps){\n  const [ minimized, setMinimized ] = React.useState(true);\n    const menu = [\n        {\n          icon: <Dashboard />,\n          label: \"Dashboard\",\n          path: \"\"\n        },\n        {\n          icon: <CalendarToday />,\n          label: \"Calendar\",\n          path: \"/calendar\"\n        },\n        {\n          icon: <AccountTree />,\n          label: \"Projects\",\n          path: \"/projects\"\n        },\n        {\n          icon: <SupervisorAccount />,\n          label: \"Team\",\n          path: \"/team\"\n        },\n        {\n          icon: <BusinessCenter /> ,\n          label: \"Equipment\",\n          path: \"/equipment\"\n        },\n        {\n          icon: <Description />,\n          label: \"Files\",\n          path: \"/files\"\n        },\n        {\n          icon: <LocalLibrary />,\n          label: \"Documentation\",\n          path: '/kb'\n        },\n        {\n          icon: <Contacts />,\n          label: \"Contacts\",\n          path: \"/contacts\"\n        },\n        {\n          icon: <EmojiNature />,\n          label: \"Workflows\",\n          path: '/workflows'\n        }\n      ]\n\n    return (\n      <Paper className=\"sidebar\" style={{width: minimized ? 64 : 200}} >\n        <List style={{flex: 1, maxWidth: minimized ? 64 : 200, transition: 'max-width 200ms ease-in'}}> \n        <ListItem style={{position: 'relative', color: 'teal', padding: 12, fontSize: 20, justifyContent: 'flex-start'}}>\n           <img src={'/assets/teal.png'} alt=\"Workhub\" style={{height: 33, marginRight: minimized ? 0 : 8, marginLeft: minimized ? 0: 0}} /> \n\n           {!minimized && <Typography>Workhub</Typography>}\n\n           <IconButton size=\"small\" style={{backgroundColor: 'green', zIndex: 9, position: 'absolute', right: -12, bottom: -12}} onClick={() => setMinimized(!minimized)}>\n              {minimized ? <ChevronRight style={{color: 'rgb(222,222,222)'}}/> : <ChevronLeft style={{color: 'rgb(222,222,222)'}} />}  \n           </IconButton>\n          \n        </ListItem>\n        <Divider />\n        {menu.map((x, ix) => (\n            <ListItem \n            className={menu.map((x) => x.path).indexOf(window.location.pathname.split(props.match.url)[1]) == ix ? 'selected menu-item': 'menu-item'}\n            onClick={() => props.history.push(`${props.match.url}${x.path}`)}\n            button >\n              {x.icon} \n              {!minimized && x.label}\n            </ListItem>\n        ))}\n        </List>\n        <Divider />\n        <ListItem style={{justifyContent: minimized ? 'center' : \"initial\"}} button onClick={() => props.history.push(`${props.match.url}/settings`)}>\n            <Settings style={{marginRight: minimized ? 0 : 12}} />\n            {!minimized && <Typography>Settings</Typography>}\n        </ListItem>\n        </Paper>\n    )\n}\n\nexport default withRouter(Sidebar)","/home/workhub/work/web-ui/src/views/Dashboard/index.tsx",["83"],"import { useHub } from '@workerhive/client';\nimport React, { Suspense, lazy } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { LayoutEditor } from '../../components/layout-editor';\n\nimport Sidebar from '../../components/sidebar'\n\nimport './index.css';\n\nconst TypeMap = lazy(() => import('./type-map'))\nconst Home = lazy(() => import('../Home'))\nconst Settings = lazy(() => import('../Settings')) \nconst Workflows = lazy(() => import('../Workflows'))\nconst Team = lazy(() => import('../Team'))\n\nexport interface DashboardProps{\n    match: any;\n}\n\nconst Fallback = (props : any) => {\n    return (<div>Loading ...</div>)\n}\n\nexport const Dashboard: React.FC<DashboardProps> = (props) => {\n    const [ hub, err ] = useHub()\n    console.log(\"HUB ERR\", hub, err)\n    return (\n        <div className=\"dashboard-view\">\n            <Sidebar />\n            {hub != null ?(\n                <Suspense fallback={<Fallback />}>\n                <div className=\"dashboard-body\">\n                    <Switch>\n                        <Route path={`${props.match.url}/`} exact component={Home} />\n                        <Route path={`${props.match.url}/workflows`} exact component={Workflows} />\n                        <Route path={`${props.match.url}/settings`} exact component={Settings} />\n                        <Route path={`${props.match.url}/settings/page-editor`} component={LayoutEditor} />\n                        <TypeMap />\n\n                    </Switch>\n                </div>\n                </Suspense>\n            ) : <Fallback />}\n\n        </div>        \n\n    )\n}","/home/workhub/work/web-ui/src/views/Settings/index.tsx",["84","85","86","87"],"import React from 'react';\n\nimport { AccordionList } from \"@workerhive/react-ui\"\nimport { SettingsMap } from './settings-map'\nimport './index.css';\n\nexport interface SettingsProps{\n    history: any;\n}\n\nexport default function Settings (props: SettingsProps){\n  const [ converters, setConverters ] = React.useState([])\n  const [ stores, setStores ] = React.useState([])\n\n  React.useEffect(() => {\n   /* getStoreTypes().then((types : any) => {\n      console.log(\"TYOES\", types)\n      setStoreTypes(types);\n    })\n\n    props.getStores();\n */\n\n    /*getConverters().then((converters) => {\n      console.log(converters)\n      setConverters(converters)\n    })*/\n  }, [])\n\n  const roles = [\n    {\n      name: \"Admin\"\n    },\n    {\n      name: \"Editor\"\n    },\n    {\n      name: \"User\"\n    }\n  ]\n\n  const [ storeTypes, setStoreTypes ] = React.useState([]);\n\n    return (\n        <div className=\"settings-view\">\n            <AccordionList items={SettingsMap(props, storeTypes, converters, roles)} />\n        </div>\n    )\n}","/home/workhub/work/web-ui/src/reportWebVitals.ts",[],"/home/workhub/work/web-ui/src/views/Workflows/index.tsx",["88"],"import React from 'react';\n\nimport { Editor, HiveProvider, NodePanel } from \"@workerhive/hive-flow\"\nimport { Header } from '@workerhive/react-ui'\nimport '@workerhive/hive-flow/dist/index.css'\nimport './index.css';\nimport { MenuView } from '../../components/menu-view';\n\nimport { useHub } from '@workerhive/client'\n\nexport interface WorkflowsProps{\n\n}\n\nexport default function Workflows(props: React.FC<WorkflowsProps>){\n\n    const [ client, err ] = useHub()\n\n    const [ nodes, setNodes ] = React.useState<Array<any>>([])\n    const [ links, setLinks ] = React.useState<Array<any>>([])\n    const [ workflow, setWorkflow ] = React.useState<any>({})\n    const [ workflows, setWorkflows ] = React.useState<Array<any>>([]);\n\n    React.useEffect(() => {\n\n        client!.actions.getWorkflows().then((workflows : any) => {\n            setWorkflows(workflows)\n        })\n   \n    }, [client])\n\n    const _onNodeAdd = (node: any) => {\n        updateNodes(nodes.concat([node]))\n    }  \n\n    const _onLinkAdd = (link: any) => {\n        updateLinks(links.concat([link]))\n    }\n\n    const updateLinks = (links : any) => {\n        setLinks(links)\n        if(workflow.id) client!.actions.updateWorkflow(workflow.id, {links: links})\n    }\n\n    const updateNodes = (nodes : any) => {\n        setNodes(nodes)\n        console.log(workflow)\n        if(workflow.id) client!.actions.updateWorkflow(workflow.id, {nodes: nodes})\n    }\n\n    return (\n        <div className=\"workflows-view\">\n            <Header tabs={[]} title=\"Workflows\" />\n            <MenuView \n                title={\"Workflows\"}\n                structure={{name: 'String'}}\n                onClick={(item : any) => {\n                    client!.actions.getWorkflow(item.id).then((workflow : any) => {\n                        console.log(workflow)\n                        setWorkflow(workflow)\n                        setNodes(workflow.nodes || [])\n                        setLinks(workflow.links || [])\n                    })\n                }}\n                onSave={(item: any) => {\n                    client!.actions.addWorkflow(item).then((r : any) => {\n                        alert(\"Saved\")\n                    })\n                    console.log(item)\n                }}\n                items={workflows}>\n            <HiveProvider \n            store={{\n                direction: 'horizontal',\n                nodes: nodes,\n                links: links,\n                onNodeAdd: _onNodeAdd,\n                onLinkAdd: _onLinkAdd,\n                onNodeUpdate: (id: any, node: any) => {\n                    let n = nodes.slice()\n                    let ix = n.map((x: any) => x.id).indexOf(id);\n                    n[ix] = {\n                        ...n[ix],\n                        ...node\n                    }\n                    updateNodes(n)\n                },\n                onNodeRemove: (node: any) => {\n                    let n = nodes.slice().filter((a: any) => node.map((x: any) => x.id).indexOf(a.id) < 0);\n                    updateNodes(n)\n                    console.log(node)\n                },\n                onLinkRemove: (link: any) => {\n                    let l = links.slice().filter((a: any) => link.map((x: any) => x.id).indexOf(a.id) < 0);\n                    updateLinks(l);\n                },\n                statusColors: {\n                    'undefined': 'gray'\n                }\n            }}>\n                <Editor />\n                <NodePanel />\n            </HiveProvider>\n            </MenuView>\n        </div>\n    )\n}","/home/workhub/work/web-ui/src/components/menu-view/index.tsx",[],"/home/workhub/work/web-ui/src/views/Home/index.tsx",[],"/home/workhub/work/web-ui/src/components/layout/index.tsx",["89","90","91","92","93","94","95","96","97"],"import React, {Suspense, lazy, useRef} from 'react';\nimport RGL, {WidthProvider} from 'react-grid-layout'\nimport { useHub } from '@workerhive/client'\nimport useResizeAware from 'react-resize-aware';\nimport 'react-grid-layout/css/styles.css';\nconst ReactGridLayout = WidthProvider(RGL);\n\nconst Header = lazy(() => import('@workerhive/react-ui').then((r) => ({default: r.Header})))\nconst SearchTable = lazy(() => import('@workerhive/react-ui').then((r) => ({default: r.SearchTable})))\n\nconst TestWidget = (props: any) => {\n    return (<div>TeST</div>)\n}\n\nexport interface LayoutItem {\n    x: number;\n    y: number;\n    w: number;\n    h: number;\n    i: string;\n    maxW?:number;\n    maxH?:number;\n    component: any;\n}\n\nexport interface LayoutProps {\n    layout: (sizes: any, rowHeight: number) => Array<LayoutItem>\n    data?: any;\n}\n\nconst defaultProps = {\n    items: 20,\n    rowHeight: 50,\n    cols: 12, \n}\n\nexport const Layout : React.FC<LayoutProps> = (props) => {\n      const [resizeListener, sizes] = useResizeAware();\n\n      const [ client, err ] = useHub();\n\n    const [ widgets, setWidgets ] = React.useState<any>({WordCounter: {type: TestWidget, title: 'Test Widget'}})\n    const [ layout, setLayouts ] = React.useState<any>({rows: [{columns: [{className: 'col-md-12', widgets: [{key: 'WordCounter'}]}]}]})\n\n    const [data, setData] = React.useState<any>({})\n    const [ types, setTypes ] = React.useState<any>({})\n\n    React.useEffect(() => {\n        client!.getModels().then((types : any) => {\n            let _type : any ={};\n            types.forEach((ty : any) => {\n                _type[ty.name] = ty\n            })\n            setTypes(_type)\n        })\n\n        if(props.data.methods){\n           setTimeout(() => {\n            for(const k in props.data.methods){\n                client!.actions[props.data.methods[k]]().then((r : any) => {\n                    let d = Object.assign({}, data);\n                    d[k] = r;\n                    setData(d)\n                })\n            }\n        }, 1000)\n  \n        }\n    }, [props.data, data])\n\n    return (\n        <Suspense fallback={<div>loading</div>}>\n            {resizeListener}\n        <ReactGridLayout \n            style={{flex:1}}\n            {...defaultProps}    \n            layout={props.layout(sizes, 64) as RGL.Layout[]}\n            onLayoutChange={(layout) => {}} \n            isBounded={true}>\n                {props.layout(sizes, 64).map((x) => (\n                    <div key={x.i} style={{display: 'flex', flexDirection: 'column'}}>\n                        {x.component instanceof Function ? x.component(data, types[props.data.type], client) : x.component}\n                    </div>\n                ))}\n        </ReactGridLayout>\n        </Suspense>\n    )\n}","/home/workhub/work/web-ui/src/views/Team/index.tsx",[],"/home/workhub/work/web-ui/src/views/Dashboard/type-map.tsx",["98","99","100","101","102"],"import React, { FC, ReactElement } from 'react';\nimport { DocumentEditor, FileBrowser, Header, MutableDialog, PermissionForm, SearchTable } from '@workerhive/react-ui'\nimport { Route } from 'react-router-dom';\nimport { Layout } from '../../components/layout';\nimport { Fab } from '@material-ui/core';\nimport { Add } from '@material-ui/icons';\n\nconst Types = [\n    {\n        path: '/dashboard/projects',\n        label: \"Projects\",\n        data: {\n            type: \"Project\",\n            methods: {\n                projects: 'getProjects'\n            }\n        },\n        layout: (sizes : any, rowHeight: number) => [\n            {\n                i: 'header',\n                x: 0,\n                y: 0,\n                w: 12,\n                h: 1,\n                component: (data: any) => (<Header title=\"Projects\" />)\n            },\n            {\n                i: 'data',\n                x: 0,\n                y: 1,\n                w: 12,\n                h: (sizes.height / rowHeight) - (sizes.width < 600 ? 2 : 1),\n                component: (data: any) => (<SearchTable renderItem={(item: any) => item.name} data={data.projects || []} />)\n            }\n        ]\n    },\n    {\n        path: '/dashboard/team',\n        label: \"Team\",\n        data: {\n            type: 'TeamMember',\n            methods: {\n                team: 'getTeamMembers'\n            }\n        },\n        layout: (sizes : any, rowHeight: number) => [\n            {\n                i: 'header',\n                x: 0,\n                y: 0,\n                w: 12,\n                h: 1,\n                component: (<Header title=\"Team\" />)\n            },\n            {\n                i: 'data',\n                x: 0,\n                y: 0,\n                w: 12,\n                h: (sizes.height / rowHeight) - (sizes.width < 600 ? 2 : 1),\n                component: (data: any, type: any, client: any) => {\n                    const t: any = {};\n                    if (type) type.def.forEach((_type: any) => {\n                        t[_type.name] = _type.type;\n                    })\n                    return ((props) => {\n                        const [open, modalOpen] = React.useState<boolean>(false);\n\n                        return (\n                            <div style={{ flex: 1, display: 'flex', position: 'relative' }}>\n                                <MutableDialog \n                                    title={\"Team\"} \n                                    structure={t}\n                                    onSave={(item : any) => {\n                                        console.log(\"new team member\", item)\n\n                                        props.client.actions.addTeamMember(item)\n                                    }}\n                                    onClose={() => modalOpen(false)}\n                                    open={open} />\n                                <SearchTable renderItem={(item:any) => item.name} data={data.team || []} />\n                                <Fab onClick={() => modalOpen(true)} style={{ position: 'absolute', right: 12, bottom: 12 }} color=\"primary\">\n                                    <Add />\n                                </Fab>\n                            </div>\n                        )\n                    })({client})\n                }\n            }\n        ]\n    },\n    {\n        path: '/dashboard/files',\n        label: \"Files\",\n        data: {\n            type: 'File',\n            methods: {\n                files: 'getFiles'\n            }\n        },\n        layout: (sizes: any, rowHeight: number) => [\n            {\n                i: 'header',\n                x: 0,\n                y: 0,\n                w: 12, \n                h: 1,\n                component: (<Header title=\"Files\" />)\n            },\n            {\n                i: 'data',\n                x: 0,\n                y: 1,\n                w: 12,\n                h: (sizes.height / rowHeight) -2,\n                component: (data: any) => (<FileBrowser files={data.files} />)\n            }\n        ]\n    },\n    {\n        path: '/dashboard/kb',\n        label: \"Knowledge\",\n        data :{\n            type: 'Knowledge',\n            methods: {\n                knowledges: 'getKnowledges'\n            }\n        },\n        layout: (sizes: any, rowHeight: number) => [\n            {\n                i: 'header',\n                x: 0,\n                y: 0,\n                w: 12,\n                h: 1,\n                component: (<Header title=\"Knowledge Base\" />)\n            },\n            {\n                i: 'editor',\n                x: 0,\n                y: 1,\n                w: 12,\n                h: (sizes.height / rowHeight) - 2,\n                component: (data: any, type: any, client: any) => {\n                    const t: any = {};\n                    if (type) type.def.forEach((_type: any) => {\n                        t[_type.name] = _type.type;\n                    })\n                    return ((props) => {\n                        const [open, modalOpen] = React.useState<boolean>(false);\n\n                        return (\n                            <div style={{ flex: 1, display: 'flex', position: 'relative' }}>\n                                <MutableDialog \n                                    title={\"Knowledge\"} \n                                    structure={t} \n                                    onSave={(item:any, type: any) => {\n                                        props.client.actions.addKnowledge(item)\n                                        modalOpen(false)\n                                    }}\n                                    onClose={() => modalOpen(false)}\n                                     open={open} />\n                                <SearchTable renderItem={(item: any) => item.title} data={data.knowledges || []} />\n                                <Fab onClick={() => modalOpen(true)} style={{ position: 'absolute', right: 12, bottom: 12 }} color=\"primary\">\n                                    <Add />\n                                </Fab>\n                            </div>\n                        )\n                    })({client})\n                }\n            }\n            \n        ]\n    },\n    {\n        path: '/dashboard/contacts',\n        label: \"Contacts\",\n        data: {\n            type: 'Contact',\n            methods: {\n                contacts: 'getContacts'\n            }\n        },\n        layout: (sizes : any, rowHeight : number) => [\n            {\n                i: 'header',\n                x: 0,\n                y: 0,\n                w: 12,\n                h: 1,\n                component: (<Header title=\"Contacts\" />)\n            },\n            {\n                i: 'data',\n                x: 0,\n                y: 1,\n                w: 12,\n                h: (sizes.height / rowHeight) - (sizes.width < 600 ? 2 : 1),\n                component: (data: any, type: any, client: any) => {\n                    const t: any = {};\n                    console.log(type)\n                    if (type) type.def.forEach((_type: any) => {\n                        t[_type.name] = _type.type;\n                    })\n                    return ((props) => {\n                        const [open, modalOpen] = React.useState<boolean>(false);\n\n                        return (\n                            <div style={{ flex: 1, display: 'flex', position: 'relative' }}>\n                                <MutableDialog \n                                    title={\"Contacts\"} \n                                    structure={t} \n                                    onSave={(item:any, type: any) => {\n                                        props.client.actions.addContact(item)\n                                        modalOpen(false)\n                                    }}\n                                    onClose={() => modalOpen(false)}\n                                     open={open} />\n                                <SearchTable renderItem={(item: any) => item.name} data={data.contacts || []} />\n                                <Fab onClick={() => modalOpen(true)} style={{ position: 'absolute', right: 12, bottom: 12 }} color=\"primary\">\n                                    <Add />\n                                </Fab>\n                            </div>\n                        )\n                    })({client})\n                }\n            }\n        ]\n    },\n    {\n        path: '/dashboard/equipment',\n        label: \"Equipment\",\n        data: {\n            type: 'Equipment',\n            methods: {\n                equipment: 'getEquipments'\n            }\n        },\n        layout: (sizes : any, rowHeight : number) => [\n            {\n                i: 'header',\n                x: 0,\n                y: 0,\n                w: 12,\n                h: 1,\n                component: (<Header title=\"Equipment\" />)\n            },\n            {\n                i: 'data',\n                x: 0,\n                y: 0,\n                w: 12,\n                h: (sizes.height / rowHeight) - (sizes.width < 600 ? 2 : 1),\n                component: (data: any, type: any, client: any) => {\n                    const t: any = {};\n                    console.log(type)\n                    if (type) type.def.forEach((_type: any) => {\n                        t[_type.name] = _type.type;\n                    })\n                    return ((props) => {\n                        const [open, modalOpen] = React.useState<boolean>(false);\n\n                        return (\n                            <div style={{ flex: 1, display: 'flex', position: 'relative' }}>\n                                <MutableDialog \n                                    title={\"Equipment\"} \n                                    structure={t} \n                                    onSave={(item:any, type: any) => {\n                                        props.client.actions.addEquipment(item)\n                                        modalOpen(false)\n                                    }}\n                                    onClose={() => modalOpen(false)}\n                                     open={open} />\n                                <SearchTable renderItem={(item: any) => item.name} data={data.equipment || []} />\n                                <Fab onClick={() => modalOpen(true)} style={{ position: 'absolute', right: 12, bottom: 12 }} color=\"primary\">\n                                    <Add />\n                                </Fab>\n                            </div>\n                        )\n                    })({client})\n                }\n            }\n        ]\n    }\n]\n\nexport default (props: any) => {\n    return (\n        <>\n            {Types.map((x) => (\n                <Route path={x.path} exact render={(props) => (\n                    <Layout data={x.data} layout={x.layout} />\n                )} />\n            ))}\n        </>\n    )\n}","/home/workhub/work/web-ui/src/index.tsx",[],"/home/workhub/work/web-ui/src/views/Settings/settings-map.tsx",["103","104"],"import { Button, Typography } from '@material-ui/core';\nimport { CRUDList } from '@workerhive/react-ui';\nimport { useHub } from '@workerhive/client'\nimport React from 'react';\n\n\nexport const SettingsMap = (props: any, storeTypes : any, converters : any, roles: any) => {\n  const [ client, err ] = useHub()\n\n  const [ models, setModels ] = React.useState<any>([]);\n  React.useEffect(() => {\n    client!.getModels().then(models => {\n      setModels(models)\n    });\n  }, [])\n\n  return [\n    {\n      title: <Typography variant=\"h6\" style={{display: 'flex'}}>Add-ons</Typography>,\n      body: <CRUDList title={\"Add-ons\"} data={converters} />\n    },\n    {\n      title: <Typography variant=\"h6\" style={{display: 'flex'}}>Connections</Typography>,\n      body: (\n        <CRUDList \n          title={\"Connections\"} \n          onDelete={(obj : any) => {\n            if(obj && obj.id){\n              props.deleteStore(obj.id)\n            }\n            \n          }}\n          onSave={(ob : any) => {\n            let obj = Object.assign({}, ob)\n            if(!obj.id){\n              props.addStore(obj)\n            }else{\n              const id = obj.id;\n              delete obj.id;\n              console.log(\"UPDATE STORE\", id, obj)\n\n              props.updateStore(id, obj)\n            }\n          }}\n          type={{name: 'String', type: {type: 'Select', items: storeTypes, key: 'id'}, host: 'String', user: 'String', pass: 'Password', dbName: 'String'}} \n          data={props.stores} />\n      )\n    },\n    {\n      title: <Typography variant=\"h6\" style={{display: 'flex'}}>Roles</Typography>,\n      body: <CRUDList title={\"Roles\"} type={{name: 'String', permissions: {type: 'Table', items: props.types}}} data={roles} />\n    },\n    {\n      title: <Typography variant=\"h6\" style={{display: 'flex'}}>Data Flow</Typography>,\n      body: (\n        <div style={{flex: 1, display: 'flex', flexDirection: 'column'}}>\n          <Typography color=\"secondary\">Warning: changing these settings is dangerous don't enter unless you know what you're doing</Typography>\n          <Button variant=\"contained\" color=\"primary\" onClick={() => props.history.push(`/dashboard/admin`)}>Go to editor</Button>\n        </div>\n      )\n    },\n    {\n      title: <Typography variant=\"h6\" style={{display: 'flex'}}>Data types</Typography>,\n      body: (\n        <CRUDList title={\"Types\"} type={{name: 'String', def: 'KV'}} data={models} \n          onSave={(obj : any) => { \n            console.log(obj) \n          }} />   \n      )\n    }\n  ]\n}","/home/workhub/work/web-ui/src/components/layout-editor/index.tsx",["105","106","107"],"import { Fab } from '@material-ui/core';\nimport { Add } from '@material-ui/icons';\nimport React from 'react';\nimport { v4 } from 'uuid';\nimport { merge, unionWith } from 'lodash'\nimport RGL, {WidthProvider} from 'react-grid-layout'\nimport 'react-grid-layout/css/styles.css';\nimport { EditorModal } from './editor-modal';\nconst ReactGridLayout = WidthProvider(RGL);\n\nexport interface LayoutEditorProps {\n\n}\n\nconst defaultProps = {\n    items: 20,\n    rowHeight: 50,\n    cols: 12, \n}\nexport const LayoutEditor : React.FC<LayoutEditorProps> = (props) => {\n    const [ modalOpen, openModal ] = React.useState<boolean>(false);\n\n    const [ layout, setLayouts ] = React.useState<any>([])\n\n    const addItem = (Item: any) => {\n        setLayouts(layout.concat([{\n            i: v4(),\n            x: 1,\n            y: 1,\n            w: 1,\n            h: 1,\n            component: <Item />\n        }]))\n    }\n\n    return (\n        <>\n        <ReactGridLayout \n            style={{flex:1}}\n            {...defaultProps}    \n            layout={layout}\n            onLayoutChange={(_layout : any) => {\n                let l = layout.map((x: any) => {\n                    return {\n                        ...x,\n                        ..._layout.filter((a : any) => a.i == x.i)[0]\n                    }\n                })\n                setLayouts(l)\n            }} \n            isBounded={true}>\n                {layout.map((x: any) => (\n                    <div key={x.i} style={{display: 'flex', flexDirection: 'column'}}>\n                        {x.component}\n                    </div>\n                ))} \n        </ReactGridLayout>\n        <Fab style={{position: 'absolute', right: 12, bottom: 12}} color=\"primary\" onClick={() => openModal(true)}>\n            <Add />\n        </Fab>\n        <EditorModal open={modalOpen} onSave={(item) => {\n            addItem(item)    \n        }} onClose={() => openModal(false)}/>\n        </>\n    )\n}","/home/workhub/work/web-ui/src/components/layout-editor/editor-modal.tsx",["108"],{"ruleId":"109","severity":1,"message":"110","line":3,"column":44,"nodeType":"111","messageId":"112","endLine":3,"endColumn":52},{"ruleId":"109","severity":1,"message":"113","line":20,"column":19,"nodeType":"111","messageId":"112","endLine":20,"endColumn":28},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":17,"column":21,"nodeType":"120","endLine":17,"endColumn":58},{"ruleId":"121","severity":1,"message":"122","line":102,"column":108,"nodeType":"123","messageId":"124","endLine":102,"endColumn":110},{"ruleId":"109","severity":1,"message":"125","line":14,"column":7,"nodeType":"111","messageId":"112","endLine":14,"endColumn":11},{"ruleId":"109","severity":1,"message":"126","line":12,"column":23,"nodeType":"111","messageId":"112","endLine":12,"endColumn":36},{"ruleId":"109","severity":1,"message":"127","line":13,"column":11,"nodeType":"111","messageId":"112","endLine":13,"endColumn":17},{"ruleId":"109","severity":1,"message":"128","line":13,"column":19,"nodeType":"111","messageId":"112","endLine":13,"endColumn":28},{"ruleId":"109","severity":1,"message":"129","line":42,"column":23,"nodeType":"111","messageId":"112","endLine":42,"endColumn":36},{"ruleId":"109","severity":1,"message":"130","line":17,"column":21,"nodeType":"111","messageId":"112","endLine":17,"endColumn":24},{"ruleId":"109","severity":1,"message":"131","line":1,"column":32,"nodeType":"111","messageId":"112","endLine":1,"endColumn":38},{"ruleId":"109","severity":1,"message":"132","line":8,"column":7,"nodeType":"111","messageId":"112","endLine":8,"endColumn":13},{"ruleId":"109","severity":1,"message":"133","line":9,"column":7,"nodeType":"111","messageId":"112","endLine":9,"endColumn":18},{"ruleId":"109","severity":1,"message":"130","line":40,"column":23,"nodeType":"111","messageId":"112","endLine":40,"endColumn":26},{"ruleId":"109","severity":1,"message":"134","line":42,"column":13,"nodeType":"111","messageId":"112","endLine":42,"endColumn":20},{"ruleId":"109","severity":1,"message":"135","line":42,"column":22,"nodeType":"111","messageId":"112","endLine":42,"endColumn":32},{"ruleId":"109","severity":1,"message":"136","line":43,"column":13,"nodeType":"111","messageId":"112","endLine":43,"endColumn":19},{"ruleId":"109","severity":1,"message":"137","line":43,"column":21,"nodeType":"111","messageId":"112","endLine":43,"endColumn":31},{"ruleId":"138","severity":1,"message":"139","line":69,"column":8,"nodeType":"140","endLine":69,"endColumn":26,"suggestions":"141"},{"ruleId":"109","severity":1,"message":"142","line":1,"column":17,"nodeType":"111","messageId":"112","endLine":1,"endColumn":19},{"ruleId":"109","severity":1,"message":"143","line":1,"column":21,"nodeType":"111","messageId":"112","endLine":1,"endColumn":33},{"ruleId":"109","severity":1,"message":"144","line":2,"column":10,"nodeType":"111","messageId":"112","endLine":2,"endColumn":24},{"ruleId":"109","severity":1,"message":"145","line":2,"column":62,"nodeType":"111","messageId":"112","endLine":2,"endColumn":76},{"ruleId":"146","severity":1,"message":"147","line":287,"column":1,"nodeType":"148","endLine":297,"endColumn":2},{"ruleId":"109","severity":1,"message":"130","line":8,"column":19,"nodeType":"111","messageId":"112","endLine":8,"endColumn":22},{"ruleId":"138","severity":1,"message":"139","line":15,"column":6,"nodeType":"140","endLine":15,"endColumn":8,"suggestions":"149"},{"ruleId":"109","severity":1,"message":"150","line":5,"column":10,"nodeType":"111","messageId":"112","endLine":5,"endColumn":15},{"ruleId":"109","severity":1,"message":"151","line":5,"column":17,"nodeType":"111","messageId":"112","endLine":5,"endColumn":26},{"ruleId":"121","severity":1,"message":"122","line":46,"column":60,"nodeType":"123","messageId":"124","endLine":46,"endColumn":62},{"ruleId":"109","severity":1,"message":"152","line":33,"column":8,"nodeType":"111","messageId":"112","endLine":33,"endColumn":15},"@typescript-eslint/no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'setHubUrl' is assigned a value but never used.","no-native-reassign",["153"],"no-negated-in-lhs",["154"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Team' is assigned a value but never used.","'setConverters' is assigned a value but never used.","'stores' is assigned a value but never used.","'setStores' is assigned a value but never used.","'setStoreTypes' is assigned a value but never used.","'err' is assigned a value but never used.","'useRef' is defined but never used.","'Header' is assigned a value but never used.","'SearchTable' is assigned a value but never used.","'widgets' is assigned a value but never used.","'setWidgets' is assigned a value but never used.","'layout' is assigned a value but never used.","'setLayouts' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'client'. Either include it or remove the dependency array.","ArrayExpression",["155"],"'FC' is defined but never used.","'ReactElement' is defined but never used.","'DocumentEditor' is defined but never used.","'PermissionForm' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",["156"],"'merge' is defined but never used.","'unionWith' is defined but never used.","'PropsOf' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},"Update the dependencies array to be: [props.data, data, client]",{"range":"161","text":"162"},"Update the dependencies array to be: [client]",{"range":"163","text":"164"},[2041,2059],"[props.data, data, client]",[468,470],"[client]"]