[{"/home/workhub/work/React-WorkerHub/src/index.tsx":"1","/home/workhub/work/React-WorkerHub/src/reportWebVitals.ts":"2","/home/workhub/work/React-WorkerHub/src/App.tsx":"3","/home/workhub/work/React-WorkerHub/src/views/Login/index.tsx":"4","/home/workhub/work/React-WorkerHub/src/views/Dashboard/index.tsx":"5","/home/workhub/work/React-WorkerHub/src/actions/auth.ts":"6","/home/workhub/work/React-WorkerHub/src/views/Dashboard/type-map.tsx":"7","/home/workhub/work/React-WorkerHub/src/views/PageEditor/index.tsx":"8","/home/workhub/work/React-WorkerHub/src/views/Admin/index.tsx":"9","/home/workhub/work/React-WorkerHub/src/views/Settings/index.tsx":"10","/home/workhub/work/React-WorkerHub/src/views/Workflows/index.tsx":"11","/home/workhub/work/React-WorkerHub/src/components/sidebar/index.tsx":"12","/home/workhub/work/React-WorkerHub/src/views/TypeEditor/index.tsx":"13","/home/workhub/work/React-WorkerHub/src/views/Dashboard/types/equipment.tsx":"14","/home/workhub/work/React-WorkerHub/src/views/Dashboard/types/file.tsx":"15","/home/workhub/work/React-WorkerHub/src/views/Dashboard/types/project.tsx":"16","/home/workhub/work/React-WorkerHub/src/views/Dashboard/types/knowledgebase.tsx":"17","/home/workhub/work/React-WorkerHub/src/views/Dashboard/types/team.tsx":"18","/home/workhub/work/React-WorkerHub/src/views/Dashboard/types/home.tsx":"19","/home/workhub/work/React-WorkerHub/src/views/Dashboard/types/contacts.tsx":"20","/home/workhub/work/React-WorkerHub/src/views/Dashboard/types/calendar.tsx":"21","/home/workhub/work/React-WorkerHub/src/components/layout/index.tsx":"22","/home/workhub/work/React-WorkerHub/src/components/menu-view/index.tsx":"23","/home/workhub/work/React-WorkerHub/src/views/Settings/settings-map.tsx":"24","/home/workhub/work/React-WorkerHub/src/components/layout-editor/index.tsx":"25","/home/workhub/work/React-WorkerHub/src/components/layout-editor/data-modal.tsx":"26","/home/workhub/work/React-WorkerHub/src/components/layout-editor/editor-modal.tsx":"27","/home/workhub/work/React-WorkerHub/src/views/Admin/nodes/type-def.tsx":"28","/home/workhub/work/React-WorkerHub/src/views/Admin/nodes/ext-store.tsx":"29","/home/workhub/work/React-WorkerHub/src/views/Admin/nodes/ext-adapter.tsx":"30","/home/workhub/work/React-WorkerHub/src/views/Admin/editor.tsx":"31"},{"size":500,"mtime":1611527528295,"results":"32","hashOfConfig":"33"},{"size":425,"mtime":1611527528295,"results":"34","hashOfConfig":"33"},{"size":1386,"mtime":1611528137568,"results":"35","hashOfConfig":"33"},{"size":2066,"mtime":1611527528299,"results":"36","hashOfConfig":"33"},{"size":2181,"mtime":1611609079973,"results":"37","hashOfConfig":"33"},{"size":387,"mtime":1611527528295,"results":"38","hashOfConfig":"33"},{"size":1204,"mtime":1611527528295,"results":"39","hashOfConfig":"33"},{"size":1822,"mtime":1611528207717,"results":"40","hashOfConfig":"33"},{"size":3811,"mtime":1611626725787,"results":"41","hashOfConfig":"33"},{"size":1301,"mtime":1611528215737,"results":"42","hashOfConfig":"33"},{"size":3590,"mtime":1611528251837,"results":"43","hashOfConfig":"33"},{"size":3350,"mtime":1611527528295,"results":"44","hashOfConfig":"33"},{"size":3532,"mtime":1611609079973,"results":"45","hashOfConfig":"33"},{"size":3157,"mtime":1611527528295,"results":"46","hashOfConfig":"33"},{"size":802,"mtime":1611539875855,"results":"47","hashOfConfig":"33"},{"size":5120,"mtime":1611536224353,"results":"48","hashOfConfig":"33"},{"size":2344,"mtime":1611527528295,"results":"49","hashOfConfig":"33"},{"size":4149,"mtime":1611527528295,"results":"50","hashOfConfig":"33"},{"size":1184,"mtime":1611539904510,"results":"51","hashOfConfig":"33"},{"size":3959,"mtime":1611527528295,"results":"52","hashOfConfig":"33"},{"size":4426,"mtime":1611609079973,"results":"53","hashOfConfig":"33"},{"size":7654,"mtime":1611609079973,"results":"54","hashOfConfig":"33"},{"size":1301,"mtime":1611609079973,"results":"55","hashOfConfig":"33"},{"size":2725,"mtime":1611609079973,"results":"56","hashOfConfig":"33"},{"size":3822,"mtime":1611527528295,"results":"57","hashOfConfig":"33"},{"size":2746,"mtime":1611528156580,"results":"58","hashOfConfig":"33"},{"size":2315,"mtime":1611527528295,"results":"59","hashOfConfig":"33"},{"size":617,"mtime":1611615025030,"results":"60","hashOfConfig":"33"},{"size":469,"mtime":1611614980965,"results":"61","hashOfConfig":"33"},{"size":3569,"mtime":1611628716598,"results":"62","hashOfConfig":"33"},{"size":1433,"mtime":1611628599914,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"1h2r28i",{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"66"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"66"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"66"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"66"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"66"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"66"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"66"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"66"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"66"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"66"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"66"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"66"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"66"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"66"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"66"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"66"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"66"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"142","messages":"143","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/workhub/work/React-WorkerHub/src/index.tsx",[],["144","145"],"/home/workhub/work/React-WorkerHub/src/reportWebVitals.ts",[],"/home/workhub/work/React-WorkerHub/src/App.tsx",["146","147","148"],"import React from 'react';\nimport isElectron from 'is-electron'\nimport { HashRouter, BrowserRouter, Route, Redirect } from 'react-router-dom'\nimport { WorkhubClient } from '@workerhive/client'\nimport { WorkhubProvider } from '@workerhive/client/dist/react'\nimport {Login} from './views/Login';\n\nimport './App.css';\nimport { Dashboard } from './views/Dashboard';\n\nlet Router : any;\n\nif(isElectron()){\n  Router = HashRouter\n}else{\n  Router = BrowserRouter\n}\n\nfunction App() {\n\n  const [ hubUrl, setHubUrl ] = React.useState<string | null>(isElectron() ? localStorage.getItem('workhub-api') : (process.env.NODE_ENV == \"development\" ? 'http://localhost:4002' : window.location.origin));\n\n\n  return (\n        <Router>\n          <div className=\"App\">\n            <Route path=\"/login\" component={Login} />\n            <Route path=\"/dashboard\" render={(props) => {\n              if(localStorage.getItem('token') && localStorage.getItem('token')!.length > 0){\n                return (\n                      <WorkhubProvider token={localStorage.getItem('token')!} url={hubUrl || ''}>\n                        <Dashboard {...props} />\n                      </WorkhubProvider>\n                )\n              }else{\n                return (\n                  <Redirect to=\"/login\" />\n                )\n              }\n            }} />\n          </div>\n        </Router>\n  );\n}\n\nexport default App;\n","/home/workhub/work/React-WorkerHub/src/views/Login/index.tsx",[],"/home/workhub/work/React-WorkerHub/src/views/Dashboard/index.tsx",["149","150"],"import { useHub } from '@workerhive/client/dist/react';\nimport { MuiPickersUtilsProvider} from '@material-ui/pickers'\nimport MomentUtils from '@date-io/moment';\n\nimport React, { Suspense, lazy } from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport Sidebar from '../../components/sidebar'\nimport { AdminView } from '../Admin';\nimport { PageEditor } from '../PageEditor';\nimport { TypeEditor } from '../TypeEditor';\nimport { setChonkyDefaults } from 'chonky';\nimport { ChonkyIconFA } from 'chonky-icon-fontawesome';\n\nimport './index.css';\n\nsetChonkyDefaults({ iconComponent: ChonkyIconFA });\n\nconst TypeMap = lazy(() => import('./type-map'))\nconst Settings = lazy(() => import('../Settings')) \nconst Workflows = lazy(() => import('../Workflows'))\n\nexport interface DashboardProps{\n    match: any;\n}\n\nconst Fallback = (props : any) => {\n    return (<div>Loading {props.reason} ...</div>)\n}\n\nexport const Dashboard: React.FC<DashboardProps> = (props) => {\n    const [ hub, store, isReady, err ] = useHub()\n    console.log(hub && Object.keys(hub!.actions).length)\n    return (\n        <MuiPickersUtilsProvider utils={MomentUtils}>\n        <div className=\"dashboard-view\">\n            <Sidebar />\n            {hub != null && isReady ?(\n                <Suspense fallback={<Fallback reason=\"Components\"/>}>\n                <div className=\"dashboard-body\">\n                    <Switch>\n                        <Route path={`${props.match.url}/workflows`} exact component={Workflows} />\n                        <Route path={`${props.match.url}/settings`} exact component={Settings} />\n                        <Route path={`${props.match.url}/settings/type-editor/:type`} exact component={TypeEditor} />\n                        <Route path={`${props.match.url}/settings/type-editor/:type/pages/:page_id`} component={PageEditor} />\n                        <Route path={`${props.match.url}/admin`} component={AdminView} />\n                        <TypeMap />\n\n                    </Switch>\n                </div>\n                </Suspense>\n            ) : <Fallback reason={`Client ${isReady} ${hub}`} />}\n\n        </div>        \n        </MuiPickersUtilsProvider>\n\n    )\n}","/home/workhub/work/React-WorkerHub/src/actions/auth.ts",[],"/home/workhub/work/React-WorkerHub/src/views/Dashboard/type-map.tsx",["151","152","153","154","155","156","157","158","159","160","161","162","163"],"import React, { FC, ReactElement } from 'react';\nimport { Calendar, DocumentEditor, FileBrowser, Header, MutableDialog, PermissionForm, SearchTable } from '@workerhive/react-ui'\nimport { Route } from 'react-router-dom';\nimport { Layout } from '../../components/layout';\nimport { Paper, Fab } from '@material-ui/core';\nimport { Add } from '@material-ui/icons';\n\nimport { CALENDAR_VIEW } from './types/calendar'\nimport { PROJECT_DRILLDOWN, PROJECT_VIEW } from './types/project';\nimport { EQUIPMENT_VIEW } from './types/equipment';\nimport { FILE_VIEW } from './types/file';\nimport { CONTACT_VIEW } from './types/contacts';\nimport { KNOWLEDGE_VIEW } from './types/knowledgebase';\nimport { TEAM_VIEW } from './types/team';\nimport { HOME_VIEW } from './types/home';\n\nconst Types = [\n    HOME_VIEW,\n   CALENDAR_VIEW,\n    PROJECT_VIEW,\n    PROJECT_DRILLDOWN,\n    EQUIPMENT_VIEW,\n    FILE_VIEW,\n    CONTACT_VIEW,\n    KNOWLEDGE_VIEW,\n    TEAM_VIEW\n]\n\nexport default (props: any) => {\n    return (\n        <>\n            {Types.map((x) => (\n                <Route path={x.path} exact render={(props) => (\n                    <Layout {...props} schema={x} />\n                )} />\n            ))}\n        </>\n    )\n}","/home/workhub/work/React-WorkerHub/src/views/PageEditor/index.tsx",["164","165","166","167","168"],"import { useHub } from '@workerhive/client/dist/react';\nimport React from 'react';\nimport { LayoutEditor } from '../../components/layout-editor';\nimport * as Components from '@workerhive/react-ui'\nimport { identity, isNil, omitBy, pickBy } from 'lodash';\nimport './index.css';\nconst WorkUI : any = {...Components}\n\nexport interface PageEditorProps {\n    match: any;\n}\n\nexport const PageEditor : React.FC<PageEditorProps> = (props) => {\n\n    const pageName = `${props.match.params.type}-${props.match.params.page_id}`\n\n    const [ hub, isReady, err ] = useHub();\n    \n    const [ loaded, setLoaded ] = React.useState<boolean>(false);\n    const [ layout, setLayout ] = React.useState<any>([])\n\n    React.useEffect(() => {\n        hub!.actions.getPageLayout(pageName).then((result : any) => {\n            console.log(result)\n            if(result.items && result.items.length > 0){\n                let items = result.items;\n                setLayout(items.map((x : any) => {\n                   let Component = WorkUI[x.component]\n                   return omitBy({ \n                      ...x,\n                      component: <Component />,\n                      componentName: x.component\n                   }, isNil)\n                }))\n              //  setLayout(result.items)\n            }\n            setLoaded(true)\n        })\n    }, [])\n\n    return (\n        <LayoutEditor layout={layout} onLayoutChange={(layout: any) => {\n            setLayout(layout)\n            console.log(\"Sending update\", layout)\n            if(loaded){\n                hub!.actions.updatePageLayout(pageName, {items: layout.map((x : any) => {\n                let ret = { ...x, component: x.componentName }\n                delete ret.componentName\n                return ret;\n                }), data: {}}) \n            }\n        }}/>\n    )\n}","/home/workhub/work/React-WorkerHub/src/views/Admin/index.tsx",["169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188"],"import React, { Component } from 'react';\n\nimport { Editor, HiveProvider, NodePanel, useEditor, withEditor } from \"@workerhive/hive-flow\"\nimport '@workerhive/hive-flow/dist/index.css'\nimport './index.css';\nimport { useHub } from '@workerhive/client/dist/react';\n\nimport * as ExtStore from './nodes/ext-store';\nimport * as ExtAdapter from './nodes/ext-adapter';\nimport * as TypeDefNode from './nodes/type-def'\nimport { link } from 'fs';\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle } from '@material-ui/core';\nimport { AdminEditor } from './editor';\n\nexport interface AdminViewProps{\n\n}\n\nexport const AdminView: React.FC<AdminViewProps> = (props) => {\n    const [ client, store, isReady, err ] = useHub()\n\n    const editor = useEditor();\n    const [ nodes, setNodes ] = React.useState<any>([])\n    const [ links, setLinks ] = React.useState<any>([])\n\n    console.log(client?.models)\n\n    const displayNodes = client!.models! ? client!.models!.filter((a) => a.directives.indexOf('configurable') > -1).map((x: any, ix :number) => ({\n                    id: `type-${ix}`,\n                    type: 'typeDef',\n                    position: {\n                        x: ix * 200,\n                        y: 200,\n                    },\n                    data: {\n                        status: 'typing',\n                        label: x.name,\n                        typedef: x.def,\n                    }\n                })).concat((store.IntegrationStore || []).map((x: any, ix : number) => ({\n                    id: `store-${ix}`,\n                    type: 'extStore',\n                    position: {\n                        x: ix * 200,\n                        y: 350\n                    },\n                    data: {\n                        status: 'warning',\n                        label: x.name\n                    }\n                }))).concat(nodes) : []\n    const types = [TypeDefNode, ExtStore, ExtAdapter]\n\n    const [ modalOpen, openModal ] = React.useState<boolean>(false);\n\n    const [ Modal, setModal ] = React.useState<any>();\n    const [ selectedNode, setNode ] = React.useState<any>();\n\n    const [ filterLink, setFilterLink ] = React.useState<any>([]);\n\n    console.log(Modal, Modal instanceof Element, Modal instanceof Component);\n    return (\n        <div className=\"admin-view\">\n\n            <HiveProvider store={{\n                nodeTypes: types,\n                nodes: displayNodes,\n                links: links.filter((a : any) => filterLink.map((x : any) => x.id).indexOf(a.id) == -1),\n                statusColors: {\n                    typing: 'green',\n                    new: 'yellow',\n                    warning: 'orange',\n                },\n                exploreNode: (id: string) => {\n                    let node : any = Object.assign({}, displayNodes.filter((a) => a.id == id)[0])\n                    const type = types.filter((a) => a.type == node.type)[0]\n                    node.type = type;\n                    setNode(node)\n                },\n                onNodeAdd: (node: any) => {\n                    setNodes(nodes.concat([node]))\n                },\n                onLinkAdd: (link : any) => {\n                    console.log(\"Addd link\", link)\n                   setLinks(links.concat([link])) \n                },\n                onLinkRemove: (_links : any) => {\n                    const link = links.filter((a : any) => {\n                        let ix = _links.map((x : any) => x.id).indexOf(a.id)\n                        return ix == -1\n                    })\n                    setFilterLink(filterLink.concat(_links))\n                   // setLinks(link)\n                }\n            }}>\n                <AdminEditor onClose={() => setNode(null)} selected={selectedNode} />\n            </HiveProvider>\n        </div>    \n    )\n}","/home/workhub/work/React-WorkerHub/src/views/Settings/index.tsx",["189","190","191","192"],"import React from 'react';\n\nimport { AccordionList } from \"@workerhive/react-ui\"\nimport { SettingsMap } from './settings-map'\nimport './index.css';\nimport { useHub } from '@workerhive/client/dist/react';\n\nexport interface SettingsProps{\n    history: any;\n}\n\nexport default function Settings (props: SettingsProps){\n  const [ converters, setConverters ] = React.useState([])\n  const [ stores, setStores ] = React.useState([])\n\n  const [ client, store, isReady ] = useHub();\n\n  React.useEffect(() => {\n    client!.actions.getStoreTypes().then((data : any) => {\n      setStoreTypes(data)\n    })\n\n    client!.actions.getStores().then((data : any) => {\n      setStores(data)\n    })\n\n   /* getStoreTypes().then((types : any) => {\n      console.log(\"TYOES\", types)\n      setStoreTypes(types);\n    })\n\n    props.getStores();\n */\n\n    /*getConverters().then((converters) => {\n      console.log(converters)\n      setConverters(converters)\n    })*/\n  }, [])\n\n  const roles = [\n    {\n      name: \"Admin\"\n    },\n    {\n      name: \"Editor\"\n    },\n    {\n      name: \"User\"\n    }\n  ]\n\n  const [ storeTypes, setStoreTypes ] = React.useState([]);\n\n    return (\n        <div className=\"settings-view\">\n            <AccordionList items={SettingsMap(props, stores, storeTypes, converters, roles)} />\n        </div>\n    )\n}","/home/workhub/work/React-WorkerHub/src/views/Workflows/index.tsx",["193"],"import React from 'react';\n\nimport { Editor, HiveProvider, NodePanel } from \"@workerhive/hive-flow\"\nimport { Header } from '@workerhive/react-ui'\nimport '@workerhive/hive-flow/dist/index.css'\nimport './index.css';\nimport { MenuView } from '../../components/menu-view';\n\nimport { useHub } from '@workerhive/client/dist/react'\n\nexport interface WorkflowsProps{\n\n}\n\nexport default function Workflows(props: React.FC<WorkflowsProps>){\n\n    const [ client, err ] = useHub()\n\n    const [ nodes, setNodes ] = React.useState<Array<any>>([])\n    const [ links, setLinks ] = React.useState<Array<any>>([])\n    const [ workflow, setWorkflow ] = React.useState<any>({})\n    const [ workflows, setWorkflows ] = React.useState<Array<any>>([]);\n\n    React.useEffect(() => {\n        console.log(client!.actions)\n        client!.actions.getWorkflows().then((workflows : any) => {\n            setWorkflows(workflows)\n        })\n   \n    }, [client])\n\n    const _onNodeAdd = (node: any) => {\n        updateNodes(nodes.concat([node]))\n    }  \n\n    const _onLinkAdd = (link: any) => {\n        updateLinks(links.concat([link]))\n    }\n\n    const updateLinks = (links : any) => {\n        setLinks(links)\n        if(workflow.id) client!.actions.updateWorkflow(workflow.id, {links: links})\n    }\n\n    const updateNodes = (nodes : any) => {\n        setNodes(nodes)\n        console.log(workflow)\n        if(workflow.id) client!.actions.updateWorkflow(workflow.id, {nodes: nodes})\n    }\n\n    return (\n        <div className=\"workflows-view\">\n            <Header tabs={[]} title=\"Workflows\" />\n            <MenuView \n                title={\"Workflows\"}\n                structure={{name: 'String'}}\n                onClick={({item }: any) => {\n                    client!.actions.getWorkflow(item.id).then((workflow : any) => {\n                        console.log(workflow)\n                        setWorkflow(workflow)\n                        setNodes(workflow.nodes || [])\n                        setLinks(workflow.links || [])\n                    })\n                }}\n                onSave={({item}:any) => {\n                    client!.actions.addWorkflow(item).then((r : any) => {\n                      \n                        alert(\"Saved\")\n                    })\n                    console.log(item)\n                }}\n                items={workflows}>\n            <HiveProvider \n            store={{\n                direction: 'horizontal',\n                nodes: nodes,\n                links: links,\n                onNodeAdd: _onNodeAdd,\n                onLinkAdd: _onLinkAdd,\n                onNodeUpdate: (id: any, node: any) => {\n                    let n = nodes.slice()\n                    let ix = n.map((x: any) => x.id).indexOf(id);\n                    n[ix] = {\n                        ...n[ix],\n                        ...node\n                    }\n                    updateNodes(n)\n                },\n                onNodeRemove: (node: any) => {\n                    let n = nodes.slice().filter((a: any) => node.map((x: any) => x.id).indexOf(a.id) < 0);\n                    updateNodes(n)\n                    console.log(node)\n                },\n                onLinkRemove: (link: any) => {\n                    let l = links.slice().filter((a: any) => link.map((x: any) => x.id).indexOf(a.id) < 0);\n                    updateLinks(l);\n                },\n                statusColors: {\n                    'undefined': 'gray'\n                }\n            }}>\n                <Editor />\n                <NodePanel />\n            </HiveProvider>\n            </MenuView>\n        </div>\n    )\n}","/home/workhub/work/React-WorkerHub/src/components/sidebar/index.tsx",["194"],"import React from 'react';\n\nimport {\n    Typography,\n    List,\n    ListItem,\n    IconButton,\n    Divider,\n    Paper\n} from '@material-ui/core';\n\nimport {\n  Contacts,\n    AccountTree,\n    Dashboard,\n    CalendarToday,\n    SupervisorAccount,\n    BusinessCenter,\n    Description,\n    EmojiNature,\n    Settings,\n    LocalLibrary,\n    ChevronLeft,\n    ChevronRight\n  } from '@material-ui/icons';\n\nimport { withRouter } from 'react-router-dom'\n\nimport './index.css';\n\nexport interface SidebarProps {\n    history: any;\n    match: any;\n}\n\nexport function Sidebar(props : SidebarProps){\n  const [ minimized, setMinimized ] = React.useState(true);\n    const menu = [\n        {\n          icon: <Dashboard />,\n          label: \"Dashboard\",\n          path: \"\"\n        },\n        {\n          icon: <CalendarToday />,\n          label: \"Calendar\",\n          path: \"/calendar\"\n        },\n        {\n          icon: <AccountTree />,\n          label: \"Projects\",\n          path: \"/projects\"\n        },\n        {\n          icon: <SupervisorAccount />,\n          label: \"Team\",\n          path: \"/team\"\n        },\n        {\n          icon: <BusinessCenter /> ,\n          label: \"Equipment\",\n          path: \"/equipment\"\n        },\n        {\n          icon: <Description />,\n          label: \"Files\",\n          path: \"/files\"\n        },\n        {\n          icon: <LocalLibrary />,\n          label: \"Documentation\",\n          path: '/kb'\n        },\n        {\n          icon: <Contacts />,\n          label: \"Contacts\",\n          path: \"/contacts\"\n        },\n        {\n          icon: <EmojiNature />,\n          label: \"Workflows\",\n          path: '/workflows'\n        }\n      ]\n\n    return (\n      <Paper className=\"sidebar\" style={{width: minimized ? 64 : 200}} >\n        <List style={{flex: 1, maxWidth: minimized ? 64 : 200, transition: 'max-width 200ms ease-in'}}> \n        <ListItem style={{position: 'relative', color: 'teal', padding: 12, fontSize: 20, justifyContent: 'flex-start'}}>\n           <img src={'/assets/teal.png'} alt=\"Workhub\" style={{height: 33, marginRight: minimized ? 0 : 8, marginLeft: minimized ? 0: 0}} /> \n\n           {!minimized && <Typography>Workhub</Typography>}\n\n           <IconButton size=\"small\" style={{backgroundColor: 'green', zIndex: 9, position: 'absolute', right: -12, bottom: -12}} onClick={() => setMinimized(!minimized)}>\n              {minimized ? <ChevronRight style={{color: 'rgb(222,222,222)'}}/> : <ChevronLeft style={{color: 'rgb(222,222,222)'}} />}  \n           </IconButton>\n          \n        </ListItem>\n        <Divider />\n        {menu.map((x, ix) => (\n            <ListItem \n            className={menu.map((x) => x.path).indexOf(window.location.pathname.split(props.match.url)[1]) == ix ? 'selected menu-item': 'menu-item'}\n            onClick={() => props.history.push(`${props.match.url}${x.path}`)}\n            button >\n              {x.icon} \n              {!minimized && x.label}\n            </ListItem>\n        ))}\n        </List>\n        <Divider />\n        <ListItem style={{justifyContent: minimized ? 'center' : \"initial\"}} button onClick={() => props.history.push(`${props.match.url}/settings`)}>\n            <Settings style={{marginRight: minimized ? 0 : 12}} />\n            {!minimized && <Typography>Settings</Typography>}\n        </ListItem>\n        </Paper>\n    )\n}\n\nexport default withRouter(Sidebar)","/home/workhub/work/React-WorkerHub/src/views/TypeEditor/index.tsx",["195","196","197","198"],"import { IconButton, List, ListItem, Paper, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { CRUDKV, Header } from \"@workerhive/react-ui\"\nimport './index.css';\nimport { Add, ArrowBack } from '@material-ui/icons';\nimport { useHub } from '@workerhive/client/dist/react';\n\nexport interface TypeEditorProps{\n    match: any;\n    history: any;\n}\n\nexport const TypeEditor : React.FC<TypeEditorProps> = (props) => {\n    const [ type, setType ] = React.useState<any>({def: [{name: 'ID', type: 'ID'}]})\n\n    const [ client, isReady, err ] = useHub();\n\n    const editPage = (page : string) => {\n        props.history.push(`${props.match.url}/pages/${page}`)\n    }\n\n    React.useEffect(() => {\n        if(isReady && client){\n            let type = client.models!.filter((a) => a.name === props.match.params.type)[0]\n            setType({def: type.def, name: type.name})\n        }\n    }, [])\n\n    return (\n        <div className=\"type-editor\">\n            <Header title={props.match.params.type}/>\n            <div className=\"type-editor__body\">\n                <div className=\"type-editor__details\">\n                    {/*<div style={{display: 'flex', alignItems: 'center'}}>\n                        <IconButton onClick={() => props.history.push(`/dashboard/settings`)}><ArrowBack /></IconButton><Typography variant=\"h6\">{props.match.params.type} </Typography>\n                    </div>*/}\n                    \n                    <Paper className=\"type-editor__types\">\n                        <CRUDKV types={client!.models || []} value={type.def} onChange={({value} : any) => {\n\n                          let fields = value.filter((a : {type: string, name: string}) => a.type.length > 0)\n                          let newFields = fields.filter((a: any) => {\n                            return type.def.map((x: any) => `${x.name}:${x.type}`).indexOf(`${a.name}:${a.type}`) < 0\n                          })\n\n                          if(newFields.length > 0){\n                              client!.actions.updateType(type.name, newFields)\n                            /*client!.actions.updateType(type.name, value.filter((a : any) => {\n                                return a.name && a.name.length > 0 && a.type && a.type.length > 0\n                            }).filter((a: any) => {\n                                return type.def.map((x: any) => x.name + \":\"+JSON.stringify(x.def)).indexOf(`${a.name}:${JSON.stringify(a.def)}`)\n                            }))*/\n                            }\n                            setType({name: type.name, def: value});\n\n                        }} />\n                    </Paper>\n\n                    <Paper className=\"type-editor__views\">\n                        <Typography variant=\"subtitle1\">Views</Typography>\n                        <List>\n                            <ListItem button onClick={() => editPage('default')}>{props.match.params.type} Home</ListItem>\n                            <ListItem button style={{display: 'flex', justifyContent: 'center'}}><Add /> Create new page</ListItem>\n                        </List>\n                    </Paper>\n                </div>\n                <Paper className=\"type-editor__integrations\">\n                    <Typography variant=\"subtitle1\">Integrations</Typography>\n                    <List>\n                        <ListItem button style={{display: 'flex', justifyContent: 'center'}}><Add /> Add Integration</ListItem>\n                    </List>\n                </Paper>\n            </div>\n        </div>\n    )\n}","/home/workhub/work/React-WorkerHub/src/views/Dashboard/types/equipment.tsx",[],"/home/workhub/work/React-WorkerHub/src/views/Dashboard/types/file.tsx",[],"/home/workhub/work/React-WorkerHub/src/views/Dashboard/types/project.tsx",[],"/home/workhub/work/React-WorkerHub/src/views/Dashboard/types/knowledgebase.tsx",[],"/home/workhub/work/React-WorkerHub/src/views/Dashboard/types/team.tsx",["199","200"],"import { Divider, Fab, ListItem, Typography } from \"@material-ui/core\";\nimport { Add, Delete, Edit } from \"@material-ui/icons\";\nimport { Header, MoreMenu, MutableDialog, SearchTable } from \"@workerhive/react-ui\";\nimport React from \"react\";\n\nexport const TEAM_VIEW = {\n        path: '/dashboard/team',\n        label: \"Team\",\n        data: {\n            team: {\n                type: \"[TeamMember]\"\n            }\n        },\n        layout: (sizes : any, rowHeight: number) => [\n            {\n                i: 'header',\n                x: 0,\n                y: 0,\n                w: 12,\n                h: 1,\n                component: (data: any) => (<Header title={data.label} />)\n            },\n            {\n                i: 'data',\n                x: 0,\n                y: 0,\n                w: 12,\n                h: (sizes.height / rowHeight) - (sizes.width < 600 ? 2 : 1),\n                component: (data: any, params: any, type: any, client: any) => {\n                    const t: any = {};\n                    if (type[\"TeamMember\"]) type[\"TeamMember\"].def.forEach((_type: any) => {\n                        t[_type.name] = _type.type;\n                    })\n                    return ((props) => {\n                        const [open, modalOpen] = React.useState<boolean>(false);\n                        const [ selected, setSelected] = React.useState<any>();\n                        return (\n                            <div style={{ flex: 1, display: 'flex', position: 'relative' }}>\n                                <MutableDialog \n                                    title={data.label} \n                                    data={selected}\n                                    structure={t}\n                                    onSave={({item} : any) => {\n                                        if(item.id){\n                                            const id = item.id;\n                                            delete item.id;\n                                            props.client.actions.updateTeamMember(id, item).then(() => {\n                                                modalOpen(false)\n                                            })\n                                        }else{\n                                            props.client.actions.addTeamMember(item).then(() => {\n                                                modalOpen(false)\n                                            })\n                                        }\n                                       \n                                    }}\n                                    onClose={() => modalOpen(false)}\n                                    open={open} />\n\n                                <SearchTable \n                                    renderItem={({item} : {item: any}) => [\n                                        <>\n                                           <Typography style={{flex: 1}}>{item.name || item.username}</Typography>\n                                           <MoreMenu menu={[\n                                               {icon: <Edit />, label: \"Edit\", action: () => {\n                                                   setSelected(item);\n                                                   modalOpen(true)\n                                               }},\n                                               {icon: <Delete />, label: \"Delete\", color: 'red', action: () => {\n                                                   props.client.actions.deleteTeamMember(item.id)\n                                               }}\n                                           ]} />\n                                        </>\n                                       \n                                    ]} \n                                    data={data.team || []} />\n\n                                <Fab onClick={() => modalOpen(true)} style={{ position: 'absolute', right: 12, bottom: 12 }} color=\"primary\">\n                                    <Add />\n                                </Fab>\n                            </div>\n                        )\n                    })({client})\n                }\n            }\n        ]\n    }","/home/workhub/work/React-WorkerHub/src/views/Dashboard/types/home.tsx",[],"/home/workhub/work/React-WorkerHub/src/views/Dashboard/types/contacts.tsx",[],"/home/workhub/work/React-WorkerHub/src/views/Dashboard/types/calendar.tsx",[],"/home/workhub/work/React-WorkerHub/src/components/layout/index.tsx",["201","202","203","204","205","206","207","208","209","210"],"import React, { Suspense, lazy, useRef } from 'react';\nimport RGL, { WidthProvider } from 'react-grid-layout'\nimport { WorkhubClient } from '@workerhive/client'\nimport useResizeAware from 'react-resize-aware';\nimport 'react-grid-layout/css/styles.css';\nimport { useHub } from '@workerhive/client/dist/react';\nconst ReactGridLayout = WidthProvider(RGL);\n\nconst Header = lazy(() => import('@workerhive/react-ui').then((r) => ({ default: r.Header })))\nconst SearchTable = lazy(() => import('@workerhive/react-ui').then((r) => ({ default: r.SearchTable })))\n\n\nexport interface LayoutItem {\n    x: number;\n    y: number;\n    w: number;\n    h: number;\n    i: string;\n    maxW?: number;\n    maxH?: number;\n    component: (store: any, params?: any, type?: object, client?: WorkhubClient | null) => any;\n}\n\nexport interface LayoutProps {\n    schema: {\n        layout: (sizes: any, rowHeight: number) => Array<LayoutItem>,\n        data: any,\n        label: string,\n        path: string\n    },\n    match: any;\n    history: any;\n}\n\nconst defaultProps = {\n    items: 20,\n    rowHeight: 50,\n    cols: 12,\n}\n\nexport const Layout: React.FC<LayoutProps> = (props) => {\n    const [resizeListener, sizes] = useResizeAware();\n\n    const [client, store, isReady, err] = useHub();\n\n    const [data, setData] = React.useState<any>({})\n    const [types, setTypes] = React.useState<any>({})\n\n    React.useEffect(() => {\n        if (Object.keys(data).length < 1 && client != null) {\n\n            if (props.schema.data) {\n                /*\n                    Data fetching schema\n                    {\n                        [key]: {\n                            type: 'GraphType',\n                            query: `getGraphType(id: $id)`\n                        }\n                    }\n                */\n                (async () => {\n                    for (const k in props.schema.data) {\n                        //Pull name from data object\n                        let name = props.schema.data[k].type;\n                        const liveData : boolean = props.schema.data[k].live || false;\n\n                        if(!name) continue;\n\n                        let isArray = false;\n                        let query = typeof(props.schema.data[k].query) === 'function' ? props.schema.data[k].query(props.match.params) : {}\n\n                        //Check to see if it's an array type\n                        if (name.match(/\\[(.*?)\\]/)) {\n                            name = name.match(/\\[(.*?)\\]/)[1]\n                            isArray = true;\n                        }\n\n                        //Fetch the full Model Description\n                        let model = client.models?.filter((a : any) => a.name === name)[0]\n\n                        if (model) {\n                            //Key the model to types state\n                            let t = Object.assign({}, types)\n                            t[model.name] = model;\n                            setTypes(t);\n\n                            let currentValue;\n\n                            //Check for data in cache if not delegate to fetch\n                            if (isArray) {\n                                currentValue = store[model.name]\n                                if (currentValue) {\n                                    console.log(\"Current value\", currentValue)\n                                } else {\n                                    let result = await client!.actions[`get${model.name}s`]()\n\n                                    currentValue = result //store[model.name]\n\n                                }\n                            } else {\n                                currentValue = store[model.name] ? store[model.name].filter((a: any) => {\n                                    let matches = true;\n                                    for (var k in (query || {})) {\n                                        if (a[k] != query[k]) {\n                                            matches = false;\n                                            break;\n                                        }\n                                    }\n                                    return matches;\n                                }) : []\n\n                                if (currentValue.length > 0) {\n                                    currentValue = currentValue[0]\n                                    console.log(\"CUrrent Valye\", currentValue)\n                                } else {\n                                    let result = await client!.actions[`get${model.name}`](query.id)\n                                    currentValue = result\n\n                                }\n                            }\n\n                            console.log(\"KEYING\", k, currentValue)\n                            let d = Object.assign({}, data)\n                            d[k] = currentValue;\n                            setData(d)\n\n\n                        }\n                    }\n                })()\n            }\n        }\n    }, [props.schema, data, store, types])\n\n    function getData() : object{\n        let obj : any = {};\n\n        for(const k in props.schema.data){\n            let name = props.schema.data[k].type;\n            const liveData: boolean = props.schema.data[k].live || false;\n\n\n            if(!name) continue;\n            let arr = (name.match(/\\[(.*?)\\]/) != null)\n            if(arr) name = name.match(/\\[(.*?)\\]/)[1]\n\n            let model = client!.models?.filter((a : any) => a.name === name)[0]\n\n            let query = typeof(props.schema.data[k].query) === 'function' ? props.schema.data[k].query(props.match.params) : {}\n\n            \n            if(liveData) console.log(\"LIVE\", client!.realtimeSync!.getArray('calendar', model).toArray())\n\n            obj[k] = arr ? \n                (liveData ? client!.realtimeSync?.getArray('calendar', model).toArray() : (store[name] || []) )\n                : (liveData ? client!.realtimeSync?.getArray('calendar', model).toArray().filter((a : any) => {\n                    let match = true;\n                    for(var queryK in query){\n                        if(a[queryK] != query[queryK]){\n                            match = false;\n                        }\n                    }\n                    return match;\n                })[0] : (store[name].filter((a: any) => {\n                    let match = true;\n                    for(var queryK in query){\n                        if(a[queryK] != query[queryK]){\n                            match = false;\n                        }\n                    }\n                    return match;\n                })[0] || {}))\n        }\n\n        return obj\n    }\n\n    return (\n        <Suspense fallback={<div>loading</div>}>\n            {resizeListener}\n            <ReactGridLayout\n                style={{ flex: 1 }}\n                {...defaultProps}\n                isDraggable={false}\n                isResizable={false}\n                layout={props.schema.layout(sizes, 64) as RGL.Layout[]}\n                onLayoutChange={(layout) => { }}\n                isBounded={true}>\n                {props.schema.layout(sizes, 64).map((x) => (\n                    <div key={x.i} style={{ display: 'flex', flexDirection: 'column' }}>\n                        {x.component instanceof Function ? x.component({\n                            ...getData(),\n                            label: props.schema.label,\n                            path: props.schema.path\n                        }, { ...props.match.params, navigate: (url: string) => props.history.push(url) }, types, client) : x.component}\n                    </div>\n                ))}\n            </ReactGridLayout>\n        </Suspense>\n    )\n}","/home/workhub/work/React-WorkerHub/src/components/menu-view/index.tsx",[],"/home/workhub/work/React-WorkerHub/src/views/Settings/settings-map.tsx",["211","212","213"],"import { Button, Typography } from '@material-ui/core';\nimport { CRUDList } from '@workerhive/react-ui';\nimport { useHub } from '@workerhive/client/dist/react'\nimport React from 'react';\n\n\nexport const SettingsMap = (props: any, stores: any, storeTypes : any, converters : any, roles: any) => {\n  const [ client, store, isReady, err ] = useHub()\n\n  const [ models, setModels ] = React.useState<any>([]);\n  React.useEffect(() => {\n    client!.getModels().then(models => {\n      setModels(models)\n    });\n  }, [])\n\n  return [\n    {\n      title: <Typography variant=\"h6\" style={{display: 'flex'}}>Add-ons</Typography>,\n      body: <CRUDList title={\"Add-ons\"} data={converters} />\n    },\n    {\n      title: <Typography variant=\"h6\" style={{display: 'flex'}}>Connections</Typography>,\n      body: (\n        <CRUDList \n          title={\"Connections\"} \n          onDelete={({item}: any) => {\n            if(item && item.id){\n              client!.actions.deleteStore(item.id)\n            }\n            \n          }}\n          onSave={({item} : any) => {\n            let obj = Object.assign({}, item)\n            if(!obj.id){\n              client!.actions.addStore(obj)\n            }else{\n              const id = obj.id;\n              delete obj.id;\n              console.log(\"UPDATE STORE\", id, obj)\n\n              client!.actions.updateStore(id, obj)\n            }\n          }}\n          type={{name: 'String', type: {type: 'Select', items: storeTypes, key: 'id'}, host: 'String', user: 'String', pass: 'Password', dbName: 'String'}} \n          data={store.IntegrationStore} />\n      )\n    },\n    {\n      title: <Typography variant=\"h6\" style={{display: 'flex'}}>Roles</Typography>,\n      body: <CRUDList title={\"Roles\"} type={{name: 'String', permissions: {type: 'Table', items: models}}} data={roles} />\n    },\n    {\n      title: <Typography variant=\"h6\" style={{display: 'flex'}}>Data Flow</Typography>,\n      body: (\n        <div style={{flex: 1, display: 'flex', flexDirection: 'column'}}>\n          <Typography color=\"secondary\">Warning: changing these settings is dangerous don't enter unless you know what you're doing</Typography>\n          <Button variant=\"contained\" color=\"primary\" onClick={() => props.history.push(`/dashboard/admin`)}>Go to editor</Button>\n        </div>\n      )\n    },\n    {\n      title: <Typography variant=\"h6\" style={{display: 'flex'}}>Data types</Typography>,\n      body: (\n        <CRUDList title={\"Types\"} type={{name: 'String', def: 'KV'}} data={models} \n          onEdit={({item}: any) => {\n            props.history.push(`${props.match.url}/type-editor/${item.name}`)\n          }}\n          onSave={({item} : any) => { \n            console.log(item) \n          }} />   \n      )\n    }\n  ]\n}","/home/workhub/work/React-WorkerHub/src/components/layout-editor/index.tsx",["214"],"import { Fab, Menu, MenuItem, Typography } from '@material-ui/core';\nimport { Add, Cancel, Edit } from '@material-ui/icons';\nimport React from 'react';\nimport { v4 } from 'uuid';\nimport { isEqual } from 'lodash'\nimport RGL, {WidthProvider} from 'react-grid-layout'\nimport { EditorModal } from './editor-modal';\nimport { DataModal } from './data-modal'\nimport 'react-grid-layout/css/styles.css';\nimport './index.css';\n\nconst ReactGridLayout = WidthProvider(RGL);\n\nexport interface LayoutEditorProps {\n    onLayoutChange?: Function;\n    layout?: any;\n}\n\nconst defaultProps = {\n    items: 20,\n    rowHeight: 50,\n    cols: 12, \n}\nexport const LayoutEditor : React.FC<LayoutEditorProps> = ({layout = [], onLayoutChange}) => {\n    const [ context, setContext ] = React.useState<any>({})\n    const [ modalOpen, openModal ] = React.useState<boolean>(false);\n    const [ linkModal, openLink ] = React.useState<boolean>(false);\n\n    const componentMenu = [<Edit />, <Cancel />]\n    const setLayouts = (layout: any) => {\n        if(onLayoutChange) onLayoutChange(layout)\n    }\n\n    const addItem = (Item: any, name: string) => {\n        setLayouts(layout.concat([{\n            i: v4(),\n            x: 1,\n            y: 1,\n            w: 1,\n            h: 1,\n            component: <Item />,\n            componentName: name\n        }]))\n    }\n\n\n    const handleContextMenu = (event: React.MouseEvent, item: any) => {\n        event.preventDefault();\n\n        setContext({x: event.clientX - 2, y: event.clientY - 4, item: item})\n        console.log(\"Right click menu\", item)\n    }\n\n    return (\n        <div className=\"workhub-layout-editor\">\n        <ReactGridLayout \n            style={{flex:1}}\n            {...defaultProps}    \n            layout={layout}\n            onLayoutChange={(_layout : any) => {\n                console.log(\"Layout change\")\n                let l = layout.map((x: any) => {\n                    return {\n                        ...x,\n                        ..._layout.filter((a : any) => a.i == x.i)[0]\n                    }\n                })\n                if(!isEqual(l, layout)){\n                    setLayouts(l)\n                }else{\n                    console.log(\"No change\")\n                }\n            }} \n            isBounded={true}>\n                {layout.map((x: any) => (\n                    <div onContextMenu={(e: React.MouseEvent) => {handleContextMenu(e, x)}} key={x.i} className=\"layout-item\" style={{display: 'flex', flexDirection: 'column'}}>\n                        <div className=\"component-menu\">\n                            {componentMenu}\n                        </div>\n                        {x.component}\n                    </div>\n                ))} \n        </ReactGridLayout>\n        <Menu\n            keepMounted\n            open={context.y != null}\n            onClose={() => setContext({})}\n            anchorReference=\"anchorPosition\"\n            anchorPosition={\n                context.y !== null && context.x !== null ? {\n                    top: context.y, left: context.x\n                } : undefined\n            }\n            >\n                <Typography style={{fontWeight: 'bold', paddingLeft: 8}}>{context.item && context.item.componentName}</Typography>\n                <MenuItem onClick={() => openLink(true)}>Link Data</MenuItem>\n                <MenuItem style={{color: 'red'}}>Remove Component</MenuItem>\n            </Menu>\n        <Fab style={{position: 'absolute', right: 12, bottom: 12}} color=\"primary\" onClick={() => openModal(true)}>\n            <Add />\n        </Fab>\n        <DataModal component={context.item} open={linkModal} onClose={(e: any) => {openLink(false)}}/>\n        <EditorModal open={modalOpen} onSave={(item, name) => {\n            addItem(item, name)    \n        }} onClose={() => openModal(false)}/>\n        </div>\n    )\n}","/home/workhub/work/React-WorkerHub/src/components/layout-editor/data-modal.tsx",["215","216"],"import { Button, Dialog, DialogActions, DialogContent, DialogTitle, FormControl, InputLabel, MenuItem, Select, TextField } from '@material-ui/core';\nimport { useHub } from '@workerhive/client/dist/react';\nimport React from 'react';\n\nconst WorkUIProps = require('@workerhive/react-ui/dist/prop-spec.js')\n\nexport interface DataModalProps {\n    open: boolean;\n    onClose?(event?: any): any;\n    component?: {componentName: string}\n}\n\nexport interface DataModalInputProps {\n    type: {type: string, properties: any};\n    label?: string;\n}\n\nexport const DataModalInput : React.FC<DataModalInputProps> = (props) => {\n    const [ client, isReady, err ] = useHub()\n\n    switch(props.type.type){\n        case 'string':\n            return <TextField fullWidth label={props.label} />\n        case 'array':\n            return (\n                <FormControl fullWidth>\n                    <InputLabel>{props.label}</InputLabel>\n                    <Select fullWidth>\n                        {client && client.models!.map((x : any) => (\n                            <MenuItem>{x.name}</MenuItem>\n                        ))}\n                    </Select>\n                </FormControl>\n            )\n        case 'object':\n            if(props.type.properties.args != null){\n               return <div>Function ({Object.keys(props.type.properties.args.properties).join(', ')})</div>\n            }\n           return null;\n\n        default: \n            return null;\n    }\n}\n\nexport const DataModal : React.FC<DataModalProps> = (props) => {\n    const [ properties, setProperties ] = React.useState<any>({})\n\n    React.useEffect(() => {\n        if(props.component){\n            let prop = WorkUIProps[`${props.component?.componentName}Props`]\n            console.log(prop)\n            setProperties(prop.properties)\n        } \n    }, [props.component])\n\n\n    return (\n        <Dialog fullWidth open={props.open} onClose={props.onClose}>\n            <DialogTitle>Link Data</DialogTitle>\n            <DialogContent>\n                {Object.keys(properties).map((prop: any) => {\n                    return (\n                     <div style={{display: 'flex', justifyContent: 'space-between', alignItems: 'center'}}>\n                         <div style={{flex: 1}}>{prop} :</div> \n                         <div style={{flex: 1}}>\n                             <DataModalInput label={prop} type={properties[prop]} />\n                          </div>\n                     </div>\n                    );\n                })}\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.onClose}>Cancel</Button>\n                <Button color=\"primary\" variant=\"contained\">Save</Button>\n            </DialogActions>\n        </Dialog>\n    )\n}","/home/workhub/work/React-WorkerHub/src/components/layout-editor/editor-modal.tsx",["217"],"import * as Components from '@workerhive/react-ui'\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, FormControl, InputLabel, MenuItem, Select, TextField } from '@material-ui/core';\nimport * as React from 'react';\n\nconst WorkUIProps = require('@workerhive/react-ui/dist/prop-spec.js')\n\nconst WorkUI : any = {...Components}\n\n\n\nexport interface EditorModalProps{\n    open: boolean;\n    onClose?: (e: any) => void;\n    onSave?: (e: any, componentName: string) => void;\n}\n\nexport const EditorModal : React.FC<EditorModalProps> = (props) => {\n    const [ component, setComponent ] = React.useState<any>(null);\n    const [ componentProps, setComponentProps ] = React.useState<any>({});\n\n    const onClose = (e: any) => {\n        if(props.onClose) props.onClose(e);\n        setComponent(null)\n    }\n\n    const onSave = (e: any) => {\n        if(props.onSave) props.onSave(WorkUI[component], component)\n        onClose(e);\n    }\n\n    return (\n        <Dialog fullWidth open={props.open} onClose={props.onClose}>\n            <DialogTitle>Add component</DialogTitle>\n            <DialogContent style={{display: 'flex', flexDirection: 'column'}}>\n                <FormControl>\n                    <InputLabel>Component</InputLabel>\n                    <Select value={component} onChange={(e) => {\n                        setComponentProps(WorkUIProps[`${e.target.value}Props`].properties)\n                        \n                        setComponent(e.target.value)\n                    }}>\n                        {Object.keys(WorkUI).map((x : string) => (\n                            <MenuItem value={x}>{x}</MenuItem>\n                        ))}\n                    </Select>\n                </FormControl>\n\n                <div>\n                    {Object.keys(componentProps).map((x) => {\n\n                        return (\n                            <div>\n                               {x}: {componentProps[x].type}\n                            </div>\n                        )\n                    })}\n                </div>\n                \n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onClose} >Cancel</Button>\n                <Button onClick={onSave} color=\"primary\" variant=\"contained\">Add</Button>\n            </DialogActions>\n        </Dialog>\n    )\n}","/home/workhub/work/React-WorkerHub/src/views/Admin/nodes/type-def.tsx",["218","219"],"import React from 'react';\n\nimport { NodeWrapper, withEditor } from '@workerhive/hive-flow';\nimport  ReactJson from 'react-json-view'\n\nexport const type = 'typeDef'\n\nexport interface ModalProps {\n    node: any;\n}\n\nexport const modal = (props : any) => {\n    console.log(props)\n    return <div style={{flex: 1}}>\n        <ReactJson src={props.node.data.typedef} />\n    </div>\n}\n\n\nexport const node = withEditor((props : any) => {\n    return (\n    <NodeWrapper {...props}>\n      <div style={{padding: 8}} className=\"type-def\">\n        {props.id && props.data.label || \"Type Def\"}\n     </div>\n    </NodeWrapper>\n    )\n})","/home/workhub/work/React-WorkerHub/src/views/Admin/nodes/ext-store.tsx",["220","221"],"import React from 'react';\n\nimport { NodeWrapper, withEditor } from '@workerhive/hive-flow';\n\nexport const type = 'extStore'\n\nexport const modal = (props : any) => {\n\n  return (\n    <div style={{flex: 1}}>\n    </div>\n  )\n}\n\nexport const node = withEditor((props : any) => {\n    return (\n    <NodeWrapper {...props}>\n      <div style={{padding: 8}} className=\"ext-store\">\n        {props.id && props.data.label || \"External Store\"}\n     </div>\n    </NodeWrapper>\n    )\n})","/home/workhub/work/React-WorkerHub/src/views/Admin/nodes/ext-adapter.tsx",["222","223","224","225","226","227","228","229","230","231","232","233","234"],"/home/workhub/work/React-WorkerHub/src/views/Admin/editor.tsx",["235","236","237"],{"ruleId":"238","replacedBy":"239"},{"ruleId":"240","replacedBy":"241"},{"ruleId":"242","severity":1,"message":"243","line":4,"column":10,"nodeType":"244","messageId":"245","endLine":4,"endColumn":23},{"ruleId":"242","severity":1,"message":"246","line":21,"column":19,"nodeType":"244","messageId":"245","endLine":21,"endColumn":28},{"ruleId":"247","severity":1,"message":"248","line":21,"column":138,"nodeType":"249","messageId":"250","endLine":21,"endColumn":140},{"ruleId":"242","severity":1,"message":"251","line":32,"column":18,"nodeType":"244","messageId":"245","endLine":32,"endColumn":23},{"ruleId":"242","severity":1,"message":"252","line":32,"column":34,"nodeType":"244","messageId":"245","endLine":32,"endColumn":37},{"ruleId":"242","severity":1,"message":"253","line":1,"column":17,"nodeType":"244","messageId":"245","endLine":1,"endColumn":19},{"ruleId":"242","severity":1,"message":"254","line":1,"column":21,"nodeType":"244","messageId":"245","endLine":1,"endColumn":33},{"ruleId":"242","severity":1,"message":"255","line":2,"column":10,"nodeType":"244","messageId":"245","endLine":2,"endColumn":18},{"ruleId":"242","severity":1,"message":"256","line":2,"column":20,"nodeType":"244","messageId":"245","endLine":2,"endColumn":34},{"ruleId":"242","severity":1,"message":"257","line":2,"column":36,"nodeType":"244","messageId":"245","endLine":2,"endColumn":47},{"ruleId":"242","severity":1,"message":"258","line":2,"column":49,"nodeType":"244","messageId":"245","endLine":2,"endColumn":55},{"ruleId":"242","severity":1,"message":"259","line":2,"column":57,"nodeType":"244","messageId":"245","endLine":2,"endColumn":70},{"ruleId":"242","severity":1,"message":"260","line":2,"column":72,"nodeType":"244","messageId":"245","endLine":2,"endColumn":86},{"ruleId":"242","severity":1,"message":"261","line":2,"column":88,"nodeType":"244","messageId":"245","endLine":2,"endColumn":99},{"ruleId":"242","severity":1,"message":"262","line":5,"column":10,"nodeType":"244","messageId":"245","endLine":5,"endColumn":15},{"ruleId":"242","severity":1,"message":"263","line":5,"column":17,"nodeType":"244","messageId":"245","endLine":5,"endColumn":20},{"ruleId":"242","severity":1,"message":"264","line":6,"column":10,"nodeType":"244","messageId":"245","endLine":6,"endColumn":13},{"ruleId":"265","severity":1,"message":"266","line":29,"column":1,"nodeType":"267","endLine":39,"endColumn":2},{"ruleId":"242","severity":1,"message":"268","line":5,"column":10,"nodeType":"244","messageId":"245","endLine":5,"endColumn":18},{"ruleId":"242","severity":1,"message":"269","line":5,"column":35,"nodeType":"244","messageId":"245","endLine":5,"endColumn":41},{"ruleId":"242","severity":1,"message":"270","line":17,"column":18,"nodeType":"244","messageId":"245","endLine":17,"endColumn":25},{"ruleId":"242","severity":1,"message":"252","line":17,"column":27,"nodeType":"244","messageId":"245","endLine":17,"endColumn":30},{"ruleId":"271","severity":1,"message":"272","line":39,"column":8,"nodeType":"273","endLine":39,"endColumn":10,"suggestions":"274"},{"ruleId":"242","severity":1,"message":"275","line":3,"column":10,"nodeType":"244","messageId":"245","endLine":3,"endColumn":16},{"ruleId":"242","severity":1,"message":"276","line":3,"column":32,"nodeType":"244","messageId":"245","endLine":3,"endColumn":41},{"ruleId":"242","severity":1,"message":"277","line":3,"column":54,"nodeType":"244","messageId":"245","endLine":3,"endColumn":64},{"ruleId":"242","severity":1,"message":"278","line":11,"column":10,"nodeType":"244","messageId":"245","endLine":11,"endColumn":14},{"ruleId":"242","severity":1,"message":"279","line":12,"column":10,"nodeType":"244","messageId":"245","endLine":12,"endColumn":16},{"ruleId":"242","severity":1,"message":"280","line":12,"column":18,"nodeType":"244","messageId":"245","endLine":12,"endColumn":24},{"ruleId":"242","severity":1,"message":"281","line":12,"column":26,"nodeType":"244","messageId":"245","endLine":12,"endColumn":39},{"ruleId":"242","severity":1,"message":"282","line":12,"column":41,"nodeType":"244","messageId":"245","endLine":12,"endColumn":54},{"ruleId":"242","severity":1,"message":"283","line":12,"column":56,"nodeType":"244","messageId":"245","endLine":12,"endColumn":67},{"ruleId":"242","severity":1,"message":"270","line":20,"column":28,"nodeType":"244","messageId":"245","endLine":20,"endColumn":35},{"ruleId":"242","severity":1,"message":"252","line":20,"column":37,"nodeType":"244","messageId":"245","endLine":20,"endColumn":40},{"ruleId":"242","severity":1,"message":"284","line":22,"column":11,"nodeType":"244","messageId":"245","endLine":22,"endColumn":17},{"ruleId":"242","severity":1,"message":"285","line":54,"column":13,"nodeType":"244","messageId":"245","endLine":54,"endColumn":22},{"ruleId":"242","severity":1,"message":"286","line":54,"column":24,"nodeType":"244","messageId":"245","endLine":54,"endColumn":33},{"ruleId":"242","severity":1,"message":"287","line":56,"column":20,"nodeType":"244","messageId":"245","endLine":56,"endColumn":28},{"ruleId":"247","severity":1,"message":"248","line":68,"column":98,"nodeType":"249","messageId":"250","endLine":68,"endColumn":100},{"ruleId":"247","severity":1,"message":"248","line":75,"column":88,"nodeType":"249","messageId":"250","endLine":75,"endColumn":90},{"ruleId":"247","severity":1,"message":"248","line":76,"column":61,"nodeType":"249","messageId":"250","endLine":76,"endColumn":63},{"ruleId":"242","severity":1,"message":"288","line":88,"column":27,"nodeType":"244","messageId":"245","endLine":88,"endColumn":31},{"ruleId":"247","severity":1,"message":"248","line":90,"column":35,"nodeType":"249","messageId":"250","endLine":90,"endColumn":37},{"ruleId":"242","severity":1,"message":"289","line":13,"column":23,"nodeType":"244","messageId":"245","endLine":13,"endColumn":36},{"ruleId":"242","severity":1,"message":"251","line":16,"column":19,"nodeType":"244","messageId":"245","endLine":16,"endColumn":24},{"ruleId":"242","severity":1,"message":"270","line":16,"column":26,"nodeType":"244","messageId":"245","endLine":16,"endColumn":33},{"ruleId":"271","severity":1,"message":"290","line":39,"column":6,"nodeType":"273","endLine":39,"endColumn":8,"suggestions":"291"},{"ruleId":"242","severity":1,"message":"252","line":17,"column":21,"nodeType":"244","messageId":"245","endLine":17,"endColumn":24},{"ruleId":"247","severity":1,"message":"248","line":102,"column":108,"nodeType":"249","messageId":"250","endLine":102,"endColumn":110},{"ruleId":"242","severity":1,"message":"292","line":1,"column":10,"nodeType":"244","messageId":"245","endLine":1,"endColumn":20},{"ruleId":"242","severity":1,"message":"293","line":5,"column":15,"nodeType":"244","messageId":"245","endLine":5,"endColumn":24},{"ruleId":"242","severity":1,"message":"252","line":16,"column":30,"nodeType":"244","messageId":"245","endLine":16,"endColumn":33},{"ruleId":"271","severity":1,"message":"294","line":27,"column":8,"nodeType":"273","endLine":27,"endColumn":10,"suggestions":"295"},{"ruleId":"242","severity":1,"message":"296","line":1,"column":10,"nodeType":"244","messageId":"245","endLine":1,"endColumn":17},{"ruleId":"242","severity":1,"message":"297","line":1,"column":24,"nodeType":"244","messageId":"245","endLine":1,"endColumn":32},{"ruleId":"242","severity":1,"message":"298","line":1,"column":33,"nodeType":"244","messageId":"245","endLine":1,"endColumn":39},{"ruleId":"242","severity":1,"message":"299","line":9,"column":7,"nodeType":"244","messageId":"245","endLine":9,"endColumn":13},{"ruleId":"242","severity":1,"message":"300","line":10,"column":7,"nodeType":"244","messageId":"245","endLine":10,"endColumn":18},{"ruleId":"242","severity":1,"message":"270","line":44,"column":27,"nodeType":"244","messageId":"245","endLine":44,"endColumn":34},{"ruleId":"242","severity":1,"message":"252","line":44,"column":36,"nodeType":"244","messageId":"245","endLine":44,"endColumn":39},{"ruleId":"242","severity":1,"message":"301","line":66,"column":31,"nodeType":"244","messageId":"245","endLine":66,"endColumn":49},{"ruleId":"247","severity":1,"message":"302","line":105,"column":50,"nodeType":"249","messageId":"250","endLine":105,"endColumn":52},{"ruleId":"271","severity":1,"message":"303","line":134,"column":8,"nodeType":"273","endLine":134,"endColumn":42,"suggestions":"304"},{"ruleId":"247","severity":1,"message":"302","line":160,"column":38,"nodeType":"249","messageId":"250","endLine":160,"endColumn":40},{"ruleId":"247","severity":1,"message":"302","line":168,"column":38,"nodeType":"249","messageId":"250","endLine":168,"endColumn":40},{"ruleId":"242","severity":1,"message":"270","line":8,"column":26,"nodeType":"244","messageId":"245","endLine":8,"endColumn":33},{"ruleId":"242","severity":1,"message":"252","line":8,"column":35,"nodeType":"244","messageId":"245","endLine":8,"endColumn":38},{"ruleId":"271","severity":1,"message":"290","line":15,"column":6,"nodeType":"273","endLine":15,"endColumn":8,"suggestions":"305"},{"ruleId":"247","severity":1,"message":"248","line":65,"column":60,"nodeType":"249","messageId":"250","endLine":65,"endColumn":62},{"ruleId":"242","severity":1,"message":"270","line":19,"column":21,"nodeType":"244","messageId":"245","endLine":19,"endColumn":28},{"ruleId":"242","severity":1,"message":"252","line":19,"column":30,"nodeType":"244","messageId":"245","endLine":19,"endColumn":33},{"ruleId":"242","severity":1,"message":"306","line":2,"column":112,"nodeType":"244","messageId":"245","endLine":2,"endColumn":121},{"ruleId":"307","severity":1,"message":"308","line":24,"column":19,"nodeType":"309","messageId":"310","endLine":24,"endColumn":21},{"ruleId":"307","severity":1,"message":"308","line":24,"column":39,"nodeType":"309","messageId":"310","endLine":24,"endColumn":41},{"ruleId":"307","severity":1,"message":"308","line":19,"column":19,"nodeType":"309","messageId":"310","endLine":19,"endColumn":21},{"ruleId":"307","severity":1,"message":"308","line":19,"column":39,"nodeType":"309","messageId":"310","endLine":19,"endColumn":41},{"ruleId":"242","severity":1,"message":"311","line":3,"column":23,"nodeType":"244","messageId":"245","endLine":3,"endColumn":32},{"ruleId":"242","severity":1,"message":"306","line":4,"column":53,"nodeType":"244","messageId":"245","endLine":4,"endColumn":62},{"ruleId":"242","severity":1,"message":"312","line":5,"column":10,"nodeType":"244","messageId":"245","endLine":5,"endColumn":16},{"ruleId":"247","severity":1,"message":"248","line":15,"column":67,"nodeType":"249","messageId":"250","endLine":15,"endColumn":69},{"ruleId":"247","severity":1,"message":"248","line":18,"column":67,"nodeType":"249","messageId":"250","endLine":18,"endColumn":69},{"ruleId":"247","severity":1,"message":"248","line":25,"column":67,"nodeType":"249","messageId":"250","endLine":25,"endColumn":69},{"ruleId":"247","severity":1,"message":"248","line":28,"column":67,"nodeType":"249","messageId":"250","endLine":28,"endColumn":69},{"ruleId":"247","severity":1,"message":"248","line":35,"column":67,"nodeType":"249","messageId":"250","endLine":35,"endColumn":69},{"ruleId":"271","severity":1,"message":"313","line":70,"column":6,"nodeType":"273","endLine":70,"endColumn":8,"suggestions":"314"},{"ruleId":"247","severity":1,"message":"248","line":77,"column":58,"nodeType":"249","messageId":"250","endLine":77,"endColumn":60},{"ruleId":"247","severity":1,"message":"248","line":87,"column":57,"nodeType":"249","messageId":"250","endLine":87,"endColumn":59},{"ruleId":"307","severity":1,"message":"308","line":109,"column":19,"nodeType":"309","messageId":"310","endLine":109,"endColumn":21},{"ruleId":"307","severity":1,"message":"308","line":109,"column":39,"nodeType":"309","messageId":"310","endLine":109,"endColumn":41},{"ruleId":"242","severity":1,"message":"315","line":13,"column":21,"nodeType":"244","messageId":"245","endLine":13,"endColumn":27},{"ruleId":"242","severity":1,"message":"285","line":17,"column":13,"nodeType":"244","messageId":"245","endLine":17,"endColumn":22},{"ruleId":"242","severity":1,"message":"286","line":17,"column":24,"nodeType":"244","messageId":"245","endLine":17,"endColumn":33},"no-native-reassign",["316"],"no-negated-in-lhs",["317"],"@typescript-eslint/no-unused-vars","'WorkhubClient' is defined but never used.","Identifier","unusedVar","'setHubUrl' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'store' is assigned a value but never used.","'err' is assigned a value but never used.","'FC' is defined but never used.","'ReactElement' is defined but never used.","'Calendar' is defined but never used.","'DocumentEditor' is defined but never used.","'FileBrowser' is defined but never used.","'Header' is defined but never used.","'MutableDialog' is defined but never used.","'PermissionForm' is defined but never used.","'SearchTable' is defined but never used.","'Paper' is defined but never used.","'Fab' is defined but never used.","'Add' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'identity' is defined but never used.","'pickBy' is defined but never used.","'isReady' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'hub' and 'pageName'. Either include them or remove the dependency array.","ArrayExpression",["318"],"'Editor' is defined but never used.","'NodePanel' is defined but never used.","'withEditor' is defined but never used.","'link' is defined but never used.","'Button' is defined but never used.","'Dialog' is defined but never used.","'DialogActions' is defined but never used.","'DialogContent' is defined but never used.","'DialogTitle' is defined but never used.","'editor' is assigned a value but never used.","'modalOpen' is assigned a value but never used.","'openModal' is assigned a value but never used.","'setModal' is assigned a value but never used.","'link' is assigned a value but never used.","'setConverters' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'client'. Either include it or remove the dependency array.",["319"],"'IconButton' is defined but never used.","'ArrowBack' is defined but never used.","React Hook React.useEffect has missing dependencies: 'client', 'isReady', and 'props.match.params.type'. Either include them or remove the dependency array.",["320"],"'Divider' is defined but never used.","'ListItem' is defined but never used.","'useRef' is defined but never used.","'Header' is assigned a value but never used.","'SearchTable' is assigned a value but never used.","'liveData' is assigned a value but never used.","Expected '!==' and instead saw '!='.","React Hook React.useEffect has missing dependencies: 'client' and 'props.match.params'. Either include them or remove the dependency array.",["321"],["322"],"'TextField' is defined but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'useEditor' is defined but never used.","'useHub' is defined but never used.","React Hook React.useEffect has missing dependencies: 'client' and 'getStore'. Either include them or remove the dependency array.",["323"],"'stores' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"324","fix":"325"},{"desc":"326","fix":"327"},{"desc":"328","fix":"329"},{"desc":"330","fix":"331"},{"desc":"326","fix":"332"},{"desc":"333","fix":"334"},"Update the dependencies array to be: [hub, pageName]",{"range":"335","text":"336"},"Update the dependencies array to be: [client]",{"range":"337","text":"338"},"Update the dependencies array to be: [client, isReady, props.match.params.type]",{"range":"339","text":"340"},"Update the dependencies array to be: [props.schema, data, store, types, client, props.match.params]",{"range":"341","text":"342"},{"range":"343","text":"338"},"Update the dependencies array to be: [client, getStore]",{"range":"344","text":"345"},[1339,1341],"[hub, pageName]",[943,945],"[client]",[901,903],"[client, isReady, props.match.params.type]",[4976,5010],"[props.schema, data, store, types, client, props.match.params]",[508,510],[2217,2219],"[client, getStore]"]